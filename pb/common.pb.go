// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.2
// source: common.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SlotNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotNumber uint64 `protobuf:"varint,1,opt,name=SlotNumber,proto3" json:"SlotNumber,omitempty"`
	BlockHash  []byte `protobuf:"bytes,2,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	TipSlot    uint64 `protobuf:"varint,3,opt,name=TipSlot,proto3" json:"TipSlot,omitempty"`
}

func (x *SlotNumberResponse) Reset() {
	*x = SlotNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotNumberResponse) ProtoMessage() {}

func (x *SlotNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotNumberResponse.ProtoReflect.Descriptor instead.
func (*SlotNumberResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *SlotNumberResponse) GetSlotNumber() uint64 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

func (x *SlotNumberResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *SlotNumberResponse) GetTipSlot() uint64 {
	if x != nil {
		return x.TipSlot
	}
	return 0
}

type ConnectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *ConnectMessage) Reset() {
	*x = ConnectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMessage) ProtoMessage() {}

func (x *ConnectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMessage.ProtoReflect.Descriptor instead.
func (*ConnectMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListeningAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=Addresses,proto3" json:"Addresses,omitempty"`
}

func (x *ListeningAddressesResponse) Reset() {
	*x = ListeningAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListeningAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListeningAddressesResponse) ProtoMessage() {}

func (x *ListeningAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListeningAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListeningAddressesResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *ListeningAddressesResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ProposalSignedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	Shard     uint64 `protobuf:"varint,2,opt,name=Shard,proto3" json:"Shard,omitempty"`
	BlockHash []byte `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *ProposalSignedData) Reset() {
	*x = ProposalSignedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalSignedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalSignedData) ProtoMessage() {}

func (x *ProposalSignedData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalSignedData.ProtoReflect.Descriptor instead.
func (*ProposalSignedData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *ProposalSignedData) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ProposalSignedData) GetShard() uint64 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *ProposalSignedData) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type ProposerSlashing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposerIndex      uint32              `protobuf:"varint,1,opt,name=ProposerIndex,proto3" json:"ProposerIndex,omitempty"`
	ProposalData1      *ProposalSignedData `protobuf:"bytes,2,opt,name=ProposalData1,proto3" json:"ProposalData1,omitempty"`
	ProposalSignature1 []byte              `protobuf:"bytes,3,opt,name=ProposalSignature1,proto3" json:"ProposalSignature1,omitempty"`
	ProposalData2      *ProposalSignedData `protobuf:"bytes,4,opt,name=ProposalData2,proto3" json:"ProposalData2,omitempty"`
	ProposalSignature2 []byte              `protobuf:"bytes,5,opt,name=ProposalSignature2,proto3" json:"ProposalSignature2,omitempty"`
}

func (x *ProposerSlashing) Reset() {
	*x = ProposerSlashing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerSlashing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerSlashing) ProtoMessage() {}

func (x *ProposerSlashing) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerSlashing.ProtoReflect.Descriptor instead.
func (*ProposerSlashing) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *ProposerSlashing) GetProposerIndex() uint32 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *ProposerSlashing) GetProposalData1() *ProposalSignedData {
	if x != nil {
		return x.ProposalData1
	}
	return nil
}

func (x *ProposerSlashing) GetProposalSignature1() []byte {
	if x != nil {
		return x.ProposalSignature1
	}
	return nil
}

func (x *ProposerSlashing) GetProposalData2() *ProposalSignedData {
	if x != nil {
		return x.ProposalData2
	}
	return nil
}

func (x *ProposerSlashing) GetProposalSignature2() []byte {
	if x != nil {
		return x.ProposalSignature2
	}
	return nil
}

type SlashableVoteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateSignaturePoC0Indices []uint32         `protobuf:"varint,1,rep,packed,name=AggregateSignaturePoC0Indices,proto3" json:"AggregateSignaturePoC0Indices,omitempty"`
	AggregateSignaturePoC1Indices []uint32         `protobuf:"varint,2,rep,packed,name=AggregateSignaturePoC1Indices,proto3" json:"AggregateSignaturePoC1Indices,omitempty"`
	Data                          *AttestationData `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	AggregateSignature            []byte           `protobuf:"bytes,4,opt,name=AggregateSignature,proto3" json:"AggregateSignature,omitempty"`
}

func (x *SlashableVoteData) Reset() {
	*x = SlashableVoteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashableVoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashableVoteData) ProtoMessage() {}

func (x *SlashableVoteData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashableVoteData.ProtoReflect.Descriptor instead.
func (*SlashableVoteData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *SlashableVoteData) GetAggregateSignaturePoC0Indices() []uint32 {
	if x != nil {
		return x.AggregateSignaturePoC0Indices
	}
	return nil
}

func (x *SlashableVoteData) GetAggregateSignaturePoC1Indices() []uint32 {
	if x != nil {
		return x.AggregateSignaturePoC1Indices
	}
	return nil
}

func (x *SlashableVoteData) GetData() *AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SlashableVoteData) GetAggregateSignature() []byte {
	if x != nil {
		return x.AggregateSignature
	}
	return nil
}

type CasperSlashing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote0 *SlashableVoteData `protobuf:"bytes,1,opt,name=Vote0,proto3" json:"Vote0,omitempty"`
	Vote1 *SlashableVoteData `protobuf:"bytes,2,opt,name=Vote1,proto3" json:"Vote1,omitempty"`
}

func (x *CasperSlashing) Reset() {
	*x = CasperSlashing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CasperSlashing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CasperSlashing) ProtoMessage() {}

func (x *CasperSlashing) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CasperSlashing.ProtoReflect.Descriptor instead.
func (*CasperSlashing) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *CasperSlashing) GetVote0() *SlashableVoteData {
	if x != nil {
		return x.Vote0
	}
	return nil
}

func (x *CasperSlashing) GetVote1() *SlashableVoteData {
	if x != nil {
		return x.Vote1
	}
	return nil
}

type AttestationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot            uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	BeaconBlockHash []byte `protobuf:"bytes,2,opt,name=BeaconBlockHash,proto3" json:"BeaconBlockHash,omitempty"`
	// This is the destination root
	TargetEpoch uint64 `protobuf:"varint,3,opt,name=TargetEpoch,proto3" json:"TargetEpoch,omitempty"`
	TargetHash  []byte `protobuf:"bytes,4,opt,name=TargetHash,proto3" json:"TargetHash,omitempty"`
	SourceEpoch uint64 `protobuf:"varint,5,opt,name=SourceEpoch,proto3" json:"SourceEpoch,omitempty"`
	SourceHash  []byte `protobuf:"bytes,6,opt,name=SourceHash,proto3" json:"SourceHash,omitempty"`
	// Crosslink vote
	ShardBlockHash      []byte `protobuf:"bytes,7,opt,name=ShardBlockHash,proto3" json:"ShardBlockHash,omitempty"`
	Shard               uint64 `protobuf:"varint,8,opt,name=Shard,proto3" json:"Shard,omitempty"`
	LatestCrosslinkHash []byte `protobuf:"bytes,9,opt,name=LatestCrosslinkHash,proto3" json:"LatestCrosslinkHash,omitempty"`
	ShardStateHash      []byte `protobuf:"bytes,10,opt,name=ShardStateHash,proto3" json:"ShardStateHash,omitempty"`
}

func (x *AttestationData) Reset() {
	*x = AttestationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationData) ProtoMessage() {}

func (x *AttestationData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationData.ProtoReflect.Descriptor instead.
func (*AttestationData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *AttestationData) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *AttestationData) GetBeaconBlockHash() []byte {
	if x != nil {
		return x.BeaconBlockHash
	}
	return nil
}

func (x *AttestationData) GetTargetEpoch() uint64 {
	if x != nil {
		return x.TargetEpoch
	}
	return 0
}

func (x *AttestationData) GetTargetHash() []byte {
	if x != nil {
		return x.TargetHash
	}
	return nil
}

func (x *AttestationData) GetSourceEpoch() uint64 {
	if x != nil {
		return x.SourceEpoch
	}
	return 0
}

func (x *AttestationData) GetSourceHash() []byte {
	if x != nil {
		return x.SourceHash
	}
	return nil
}

func (x *AttestationData) GetShardBlockHash() []byte {
	if x != nil {
		return x.ShardBlockHash
	}
	return nil
}

func (x *AttestationData) GetShard() uint64 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *AttestationData) GetLatestCrosslinkHash() []byte {
	if x != nil {
		return x.LatestCrosslinkHash
	}
	return nil
}

func (x *AttestationData) GetShardStateHash() []byte {
	if x != nil {
		return x.ShardStateHash
	}
	return nil
}

type AttestationDataAndCustodyBit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *AttestationData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	PoCBit bool             `protobuf:"varint,2,opt,name=PoCBit,proto3" json:"PoCBit,omitempty"`
}

func (x *AttestationDataAndCustodyBit) Reset() {
	*x = AttestationDataAndCustodyBit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationDataAndCustodyBit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationDataAndCustodyBit) ProtoMessage() {}

func (x *AttestationDataAndCustodyBit) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationDataAndCustodyBit.ProtoReflect.Descriptor instead.
func (*AttestationDataAndCustodyBit) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *AttestationDataAndCustodyBit) GetData() *AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AttestationDataAndCustodyBit) GetPoCBit() bool {
	if x != nil {
		return x.PoCBit
	}
	return false
}

type Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                  *AttestationData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	ParticipationBitfield []byte           `protobuf:"bytes,2,opt,name=ParticipationBitfield,proto3" json:"ParticipationBitfield,omitempty"`
	CustodyBitfield       []byte           `protobuf:"bytes,3,opt,name=CustodyBitfield,proto3" json:"CustodyBitfield,omitempty"`
	AggregateSig          []byte           `protobuf:"bytes,4,opt,name=AggregateSig,proto3" json:"AggregateSig,omitempty"`
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *Attestation) GetData() *AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Attestation) GetParticipationBitfield() []byte {
	if x != nil {
		return x.ParticipationBitfield
	}
	return nil
}

func (x *Attestation) GetCustodyBitfield() []byte {
	if x != nil {
		return x.CustodyBitfield
	}
	return nil
}

func (x *Attestation) GetAggregateSig() []byte {
	if x != nil {
		return x.AggregateSig
	}
	return nil
}

type DepositParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey             []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	ProofOfPossession     []byte `protobuf:"bytes,2,opt,name=ProofOfPossession,proto3" json:"ProofOfPossession,omitempty"`
	WithdrawalCredentials []byte `protobuf:"bytes,3,opt,name=WithdrawalCredentials,proto3" json:"WithdrawalCredentials,omitempty"`
}

func (x *DepositParameters) Reset() {
	*x = DepositParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositParameters) ProtoMessage() {}

func (x *DepositParameters) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositParameters.ProtoReflect.Descriptor instead.
func (*DepositParameters) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *DepositParameters) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DepositParameters) GetProofOfPossession() []byte {
	if x != nil {
		return x.ProofOfPossession
	}
	return nil
}

func (x *DepositParameters) GetWithdrawalCredentials() []byte {
	if x != nil {
		return x.WithdrawalCredentials
	}
	return nil
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *DepositParameters `protobuf:"bytes,1,opt,name=Parameters,proto3" json:"Parameters,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Deposit) GetParameters() *DepositParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Exit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot           uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	ValidatorIndex uint64 `protobuf:"varint,2,opt,name=ValidatorIndex,proto3" json:"ValidatorIndex,omitempty"`
	Signature      []byte `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *Exit) Reset() {
	*x = Exit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exit) ProtoMessage() {}

func (x *Exit) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exit.ProtoReflect.Descriptor instead.
func (*Exit) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *Exit) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Exit) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Exit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Body   *BlockBody   `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetBody() *BlockBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotNumber     uint64 `protobuf:"varint,1,opt,name=SlotNumber,proto3" json:"SlotNumber,omitempty"`
	ParentRoot     []byte `protobuf:"bytes,2,opt,name=ParentRoot,proto3" json:"ParentRoot,omitempty"`
	StateRoot      []byte `protobuf:"bytes,3,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	RandaoReveal   []byte `protobuf:"bytes,4,opt,name=RandaoReveal,proto3" json:"RandaoReveal,omitempty"`
	Signature      []byte `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
	ValidatorIndex uint32 `protobuf:"varint,6,opt,name=ValidatorIndex,proto3" json:"ValidatorIndex,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *BlockHeader) GetSlotNumber() uint64 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

func (x *BlockHeader) GetParentRoot() []byte {
	if x != nil {
		return x.ParentRoot
	}
	return nil
}

func (x *BlockHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BlockHeader) GetRandaoReveal() []byte {
	if x != nil {
		return x.RandaoReveal
	}
	return nil
}

func (x *BlockHeader) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BlockHeader) GetValidatorIndex() uint32 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

type BlockBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attestations      []*Attestation      `protobuf:"bytes,1,rep,name=Attestations,proto3" json:"Attestations,omitempty"`
	ProposerSlashings []*ProposerSlashing `protobuf:"bytes,2,rep,name=ProposerSlashings,proto3" json:"ProposerSlashings,omitempty"`
	CasperSlashings   []*CasperSlashing   `protobuf:"bytes,3,rep,name=CasperSlashings,proto3" json:"CasperSlashings,omitempty"`
	Deposits          []*Deposit          `protobuf:"bytes,4,rep,name=Deposits,proto3" json:"Deposits,omitempty"`
	Exits             []*Exit             `protobuf:"bytes,5,rep,name=Exits,proto3" json:"Exits,omitempty"`
	Votes             []*AggregatedVote   `protobuf:"bytes,6,rep,name=Votes,proto3" json:"Votes,omitempty"`
}

func (x *BlockBody) Reset() {
	*x = BlockBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBody) ProtoMessage() {}

func (x *BlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBody.ProtoReflect.Descriptor instead.
func (*BlockBody) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *BlockBody) GetAttestations() []*Attestation {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *BlockBody) GetProposerSlashings() []*ProposerSlashing {
	if x != nil {
		return x.ProposerSlashings
	}
	return nil
}

func (x *BlockBody) GetCasperSlashings() []*CasperSlashing {
	if x != nil {
		return x.CasperSlashings
	}
	return nil
}

func (x *BlockBody) GetDeposits() []*Deposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

func (x *BlockBody) GetExits() []*Exit {
	if x != nil {
		return x.Exits
	}
	return nil
}

func (x *BlockBody) GetVotes() []*AggregatedVote {
	if x != nil {
		return x.Votes
	}
	return nil
}

type ForkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreForkVersion  uint64 `protobuf:"varint,1,opt,name=PreForkVersion,proto3" json:"PreForkVersion,omitempty"`
	PostForkVersion uint64 `protobuf:"varint,2,opt,name=PostForkVersion,proto3" json:"PostForkVersion,omitempty"`
	ForkSlot        uint64 `protobuf:"varint,3,opt,name=ForkSlot,proto3" json:"ForkSlot,omitempty"`
}

func (x *ForkData) Reset() {
	*x = ForkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkData) ProtoMessage() {}

func (x *ForkData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkData.ProtoReflect.Descriptor instead.
func (*ForkData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *ForkData) GetPreForkVersion() uint64 {
	if x != nil {
		return x.PreForkVersion
	}
	return 0
}

func (x *ForkData) GetPostForkVersion() uint64 {
	if x != nil {
		return x.PostForkVersion
	}
	return 0
}

func (x *ForkData) GetForkSlot() uint64 {
	if x != nil {
		return x.ForkSlot
	}
	return 0
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey                  []byte `protobuf:"bytes,1,opt,name=Pubkey,proto3" json:"Pubkey,omitempty"`
	WithdrawalCredentials   []byte `protobuf:"bytes,2,opt,name=WithdrawalCredentials,proto3" json:"WithdrawalCredentials,omitempty"`
	Status                  uint64 `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	LatestStatusChangeSlot  uint64 `protobuf:"varint,5,opt,name=LatestStatusChangeSlot,proto3" json:"LatestStatusChangeSlot,omitempty"`
	ExitCount               uint64 `protobuf:"varint,6,opt,name=ExitCount,proto3" json:"ExitCount,omitempty"`
	LastPoCChangeSlot       uint64 `protobuf:"varint,7,opt,name=LastPoCChangeSlot,proto3" json:"LastPoCChangeSlot,omitempty"`
	SecondLastPoCChangeSlot uint64 `protobuf:"varint,8,opt,name=SecondLastPoCChangeSlot,proto3" json:"SecondLastPoCChangeSlot,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *Validator) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *Validator) GetWithdrawalCredentials() []byte {
	if x != nil {
		return x.WithdrawalCredentials
	}
	return nil
}

func (x *Validator) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Validator) GetLatestStatusChangeSlot() uint64 {
	if x != nil {
		return x.LatestStatusChangeSlot
	}
	return 0
}

func (x *Validator) GetExitCount() uint64 {
	if x != nil {
		return x.ExitCount
	}
	return 0
}

func (x *Validator) GetLastPoCChangeSlot() uint64 {
	if x != nil {
		return x.LastPoCChangeSlot
	}
	return 0
}

func (x *Validator) GetSecondLastPoCChangeSlot() uint64 {
	if x != nil {
		return x.SecondLastPoCChangeSlot
	}
	return 0
}

type ShardCommittee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard               uint64   `protobuf:"varint,1,opt,name=Shard,proto3" json:"Shard,omitempty"`
	Committee           []uint32 `protobuf:"varint,2,rep,packed,name=Committee,proto3" json:"Committee,omitempty"`
	TotalValidatorCount uint64   `protobuf:"varint,3,opt,name=TotalValidatorCount,proto3" json:"TotalValidatorCount,omitempty"`
}

func (x *ShardCommittee) Reset() {
	*x = ShardCommittee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardCommittee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardCommittee) ProtoMessage() {}

func (x *ShardCommittee) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardCommittee.ProtoReflect.Descriptor instead.
func (*ShardCommittee) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *ShardCommittee) GetShard() uint64 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *ShardCommittee) GetCommittee() []uint32 {
	if x != nil {
		return x.Committee
	}
	return nil
}

func (x *ShardCommittee) GetTotalValidatorCount() uint64 {
	if x != nil {
		return x.TotalValidatorCount
	}
	return 0
}

type ShardCommitteesForSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Committees []*ShardCommittee `protobuf:"bytes,1,rep,name=Committees,proto3" json:"Committees,omitempty"`
}

func (x *ShardCommitteesForSlot) Reset() {
	*x = ShardCommitteesForSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardCommitteesForSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardCommitteesForSlot) ProtoMessage() {}

func (x *ShardCommitteesForSlot) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardCommitteesForSlot.ProtoReflect.Descriptor instead.
func (*ShardCommitteesForSlot) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *ShardCommitteesForSlot) GetCommittees() []*ShardCommittee {
	if x != nil {
		return x.Committees
	}
	return nil
}

type PersistentCommitteesForSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistentCommittee []uint32 `protobuf:"varint,1,rep,packed,name=PersistentCommittee,proto3" json:"PersistentCommittee,omitempty"`
}

func (x *PersistentCommitteesForSlot) Reset() {
	*x = PersistentCommitteesForSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentCommitteesForSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentCommitteesForSlot) ProtoMessage() {}

func (x *PersistentCommitteesForSlot) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentCommitteesForSlot.ProtoReflect.Descriptor instead.
func (*PersistentCommitteesForSlot) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *PersistentCommitteesForSlot) GetPersistentCommittee() []uint32 {
	if x != nil {
		return x.PersistentCommittee
	}
	return nil
}

type Crosslink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot           uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	ShardBlockHash []byte `protobuf:"bytes,2,opt,name=ShardBlockHash,proto3" json:"ShardBlockHash,omitempty"`
	ShardStateHash []byte `protobuf:"bytes,3,opt,name=ShardStateHash,proto3" json:"ShardStateHash,omitempty"`
}

func (x *Crosslink) Reset() {
	*x = Crosslink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crosslink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crosslink) ProtoMessage() {}

func (x *Crosslink) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crosslink.ProtoReflect.Descriptor instead.
func (*Crosslink) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *Crosslink) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Crosslink) GetShardBlockHash() []byte {
	if x != nil {
		return x.ShardBlockHash
	}
	return nil
}

func (x *Crosslink) GetShardStateHash() []byte {
	if x != nil {
		return x.ShardStateHash
	}
	return nil
}

type PendingAttestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                  *AttestationData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	ParticipationBitfield []byte           `protobuf:"bytes,2,opt,name=ParticipationBitfield,proto3" json:"ParticipationBitfield,omitempty"`
	CustodyBitfield       []byte           `protobuf:"bytes,3,opt,name=CustodyBitfield,proto3" json:"CustodyBitfield,omitempty"`
	InclusionDelay        uint64           `protobuf:"varint,4,opt,name=InclusionDelay,proto3" json:"InclusionDelay,omitempty"`
	ProposerIndex         uint32           `protobuf:"varint,5,opt,name=ProposerIndex,proto3" json:"ProposerIndex,omitempty"`
}

func (x *PendingAttestation) Reset() {
	*x = PendingAttestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAttestation) ProtoMessage() {}

func (x *PendingAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAttestation.ProtoReflect.Descriptor instead.
func (*PendingAttestation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *PendingAttestation) GetData() *AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PendingAttestation) GetParticipationBitfield() []byte {
	if x != nil {
		return x.ParticipationBitfield
	}
	return nil
}

func (x *PendingAttestation) GetCustodyBitfield() []byte {
	if x != nil {
		return x.CustodyBitfield
	}
	return nil
}

func (x *PendingAttestation) GetInclusionDelay() uint64 {
	if x != nil {
		return x.InclusionDelay
	}
	return 0
}

func (x *PendingAttestation) GetProposerIndex() uint32 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                               uint64                    `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	EpochIndex                         uint64                    `protobuf:"varint,2,opt,name=EpochIndex,proto3" json:"EpochIndex,omitempty"`
	GenesisTime                        uint64                    `protobuf:"varint,3,opt,name=GenesisTime,proto3" json:"GenesisTime,omitempty"`
	ForkData                           *ForkData                 `protobuf:"bytes,4,opt,name=ForkData,proto3" json:"ForkData,omitempty"`
	ValidatorRegistry                  []*Validator              `protobuf:"bytes,5,rep,name=ValidatorRegistry,proto3" json:"ValidatorRegistry,omitempty"`
	ValidatorBalances                  []uint64                  `protobuf:"varint,6,rep,packed,name=ValidatorBalances,proto3" json:"ValidatorBalances,omitempty"`
	ValidatorRegistryLatestChangeEpoch uint64                    `protobuf:"varint,7,opt,name=ValidatorRegistryLatestChangeEpoch,proto3" json:"ValidatorRegistryLatestChangeEpoch,omitempty"`
	ValidatorRegistryExitCount         uint64                    `protobuf:"varint,8,opt,name=ValidatorRegistryExitCount,proto3" json:"ValidatorRegistryExitCount,omitempty"`
	ValidatorRegistryDeltaChainTip     []byte                    `protobuf:"bytes,9,opt,name=ValidatorRegistryDeltaChainTip,proto3" json:"ValidatorRegistryDeltaChainTip,omitempty"`
	RandaoMix                          []byte                    `protobuf:"bytes,10,opt,name=RandaoMix,proto3" json:"RandaoMix,omitempty"`
	NextRandaoMix                      []byte                    `protobuf:"bytes,11,opt,name=NextRandaoMix,proto3" json:"NextRandaoMix,omitempty"`
	ShardCommittees                    []*ShardCommitteesForSlot `protobuf:"bytes,12,rep,name=ShardCommittees,proto3" json:"ShardCommittees,omitempty"`
	PreviousJustifiedEpoch             uint64                    `protobuf:"varint,13,opt,name=PreviousJustifiedEpoch,proto3" json:"PreviousJustifiedEpoch,omitempty"`
	JustifiedEpoch                     uint64                    `protobuf:"varint,14,opt,name=JustifiedEpoch,proto3" json:"JustifiedEpoch,omitempty"`
	JustificationBitField              uint64                    `protobuf:"varint,15,opt,name=JustificationBitField,proto3" json:"JustificationBitField,omitempty"`
	FinalizedEpoch                     uint64                    `protobuf:"varint,16,opt,name=FinalizedEpoch,proto3" json:"FinalizedEpoch,omitempty"`
	LatestCrosslinks                   []*Crosslink              `protobuf:"bytes,17,rep,name=LatestCrosslinks,proto3" json:"LatestCrosslinks,omitempty"`
	PreviousCrosslinks                 []*Crosslink              `protobuf:"bytes,18,rep,name=PreviousCrosslinks,proto3" json:"PreviousCrosslinks,omitempty"`
	ShardRegistry                      [][]byte                  `protobuf:"bytes,19,rep,name=ShardRegistry,proto3" json:"ShardRegistry,omitempty"`
	LatestBlockHashes                  [][]byte                  `protobuf:"bytes,20,rep,name=LatestBlockHashes,proto3" json:"LatestBlockHashes,omitempty"`
	CurrentEpochAttestations           []*PendingAttestation     `protobuf:"bytes,21,rep,name=CurrentEpochAttestations,proto3" json:"CurrentEpochAttestations,omitempty"`
	PreviousEpochAttestations          []*PendingAttestation     `protobuf:"bytes,22,rep,name=PreviousEpochAttestations,proto3" json:"PreviousEpochAttestations,omitempty"`
	BatchedBlockRoots                  [][]byte                  `protobuf:"bytes,23,rep,name=BatchedBlockRoots,proto3" json:"BatchedBlockRoots,omitempty"`
	Proposals                          []*ActiveProposal         `protobuf:"bytes,24,rep,name=Proposals,proto3" json:"Proposals,omitempty"`
	PendingVotes                       []*AggregatedVote         `protobuf:"bytes,25,rep,name=PendingVotes,proto3" json:"PendingVotes,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *State) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *State) GetEpochIndex() uint64 {
	if x != nil {
		return x.EpochIndex
	}
	return 0
}

func (x *State) GetGenesisTime() uint64 {
	if x != nil {
		return x.GenesisTime
	}
	return 0
}

func (x *State) GetForkData() *ForkData {
	if x != nil {
		return x.ForkData
	}
	return nil
}

func (x *State) GetValidatorRegistry() []*Validator {
	if x != nil {
		return x.ValidatorRegistry
	}
	return nil
}

func (x *State) GetValidatorBalances() []uint64 {
	if x != nil {
		return x.ValidatorBalances
	}
	return nil
}

func (x *State) GetValidatorRegistryLatestChangeEpoch() uint64 {
	if x != nil {
		return x.ValidatorRegistryLatestChangeEpoch
	}
	return 0
}

func (x *State) GetValidatorRegistryExitCount() uint64 {
	if x != nil {
		return x.ValidatorRegistryExitCount
	}
	return 0
}

func (x *State) GetValidatorRegistryDeltaChainTip() []byte {
	if x != nil {
		return x.ValidatorRegistryDeltaChainTip
	}
	return nil
}

func (x *State) GetRandaoMix() []byte {
	if x != nil {
		return x.RandaoMix
	}
	return nil
}

func (x *State) GetNextRandaoMix() []byte {
	if x != nil {
		return x.NextRandaoMix
	}
	return nil
}

func (x *State) GetShardCommittees() []*ShardCommitteesForSlot {
	if x != nil {
		return x.ShardCommittees
	}
	return nil
}

func (x *State) GetPreviousJustifiedEpoch() uint64 {
	if x != nil {
		return x.PreviousJustifiedEpoch
	}
	return 0
}

func (x *State) GetJustifiedEpoch() uint64 {
	if x != nil {
		return x.JustifiedEpoch
	}
	return 0
}

func (x *State) GetJustificationBitField() uint64 {
	if x != nil {
		return x.JustificationBitField
	}
	return 0
}

func (x *State) GetFinalizedEpoch() uint64 {
	if x != nil {
		return x.FinalizedEpoch
	}
	return 0
}

func (x *State) GetLatestCrosslinks() []*Crosslink {
	if x != nil {
		return x.LatestCrosslinks
	}
	return nil
}

func (x *State) GetPreviousCrosslinks() []*Crosslink {
	if x != nil {
		return x.PreviousCrosslinks
	}
	return nil
}

func (x *State) GetShardRegistry() [][]byte {
	if x != nil {
		return x.ShardRegistry
	}
	return nil
}

func (x *State) GetLatestBlockHashes() [][]byte {
	if x != nil {
		return x.LatestBlockHashes
	}
	return nil
}

func (x *State) GetCurrentEpochAttestations() []*PendingAttestation {
	if x != nil {
		return x.CurrentEpochAttestations
	}
	return nil
}

func (x *State) GetPreviousEpochAttestations() []*PendingAttestation {
	if x != nil {
		return x.PreviousEpochAttestations
	}
	return nil
}

func (x *State) GetBatchedBlockRoots() [][]byte {
	if x != nil {
		return x.BatchedBlockRoots
	}
	return nil
}

func (x *State) GetProposals() []*ActiveProposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *State) GetPendingVotes() []*AggregatedVote {
	if x != nil {
		return x.PendingVotes
	}
	return nil
}

type ValidatorRegistryDeltaBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestRegistryDeltaRoot []byte `protobuf:"bytes,1,opt,name=LatestRegistryDeltaRoot,proto3" json:"LatestRegistryDeltaRoot,omitempty"`
	ValidatorIndex          uint32 `protobuf:"varint,2,opt,name=ValidatorIndex,proto3" json:"ValidatorIndex,omitempty"`
	Pubkey                  []byte `protobuf:"bytes,3,opt,name=Pubkey,proto3" json:"Pubkey,omitempty"`
	Flag                    uint64 `protobuf:"varint,4,opt,name=Flag,proto3" json:"Flag,omitempty"`
}

func (x *ValidatorRegistryDeltaBlock) Reset() {
	*x = ValidatorRegistryDeltaBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorRegistryDeltaBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorRegistryDeltaBlock) ProtoMessage() {}

func (x *ValidatorRegistryDeltaBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorRegistryDeltaBlock.ProtoReflect.Descriptor instead.
func (*ValidatorRegistryDeltaBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *ValidatorRegistryDeltaBlock) GetLatestRegistryDeltaRoot() []byte {
	if x != nil {
		return x.LatestRegistryDeltaRoot
	}
	return nil
}

func (x *ValidatorRegistryDeltaBlock) GetValidatorIndex() uint32 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *ValidatorRegistryDeltaBlock) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *ValidatorRegistryDeltaBlock) GetFlag() uint64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type AttestationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// possibly sign this message to prevent DoS
	ParticipationBitfield []byte `protobuf:"bytes,1,opt,name=ParticipationBitfield,proto3" json:"ParticipationBitfield,omitempty"`
}

func (x *AttestationRequest) Reset() {
	*x = AttestationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationRequest) ProtoMessage() {}

func (x *AttestationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationRequest.ProtoReflect.Descriptor instead.
func (*AttestationRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *AttestationRequest) GetParticipationBitfield() []byte {
	if x != nil {
		return x.ParticipationBitfield
	}
	return nil
}

type VoteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       uint32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Shards     []uint32 `protobuf:"varint,2,rep,packed,name=Shards,proto3" json:"Shards,omitempty"`
	ActionHash []byte   `protobuf:"bytes,3,opt,name=ActionHash,proto3" json:"ActionHash,omitempty"`
	Proposer   uint32   `protobuf:"varint,4,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
}

func (x *VoteData) Reset() {
	*x = VoteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteData) ProtoMessage() {}

func (x *VoteData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteData.ProtoReflect.Descriptor instead.
func (*VoteData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *VoteData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VoteData) GetShards() []uint32 {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *VoteData) GetActionHash() []byte {
	if x != nil {
		return x.ActionHash
	}
	return nil
}

func (x *VoteData) GetProposer() uint32 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

type AggregatedVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          *VoteData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Signature     []byte    `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Participation []byte    `protobuf:"bytes,3,opt,name=Participation,proto3" json:"Participation,omitempty"`
}

func (x *AggregatedVote) Reset() {
	*x = AggregatedVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedVote) ProtoMessage() {}

func (x *AggregatedVote) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedVote.ProtoReflect.Descriptor instead.
func (*AggregatedVote) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *AggregatedVote) GetData() *VoteData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AggregatedVote) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AggregatedVote) GetParticipation() []byte {
	if x != nil {
		return x.Participation
	}
	return nil
}

type ActiveProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          *VoteData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Participation []byte    `protobuf:"bytes,2,opt,name=Participation,proto3" json:"Participation,omitempty"`
	StartEpoch    uint64    `protobuf:"varint,3,opt,name=StartEpoch,proto3" json:"StartEpoch,omitempty"`
	Queued        bool      `protobuf:"varint,4,opt,name=Queued,proto3" json:"Queued,omitempty"`
}

func (x *ActiveProposal) Reset() {
	*x = ActiveProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveProposal) ProtoMessage() {}

func (x *ActiveProposal) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveProposal.ProtoReflect.Descriptor instead.
func (*ActiveProposal) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *ActiveProposal) GetData() *VoteData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ActiveProposal) GetParticipation() []byte {
	if x != nil {
		return x.Participation
	}
	return nil
}

func (x *ActiveProposal) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *ActiveProposal) GetQueued() bool {
	if x != nil {
		return x.Queued
	}
	return false
}

type ShardBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ShardBlockHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Body   *ShardBlockBody   `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *ShardBlock) Reset() {
	*x = ShardBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardBlock) ProtoMessage() {}

func (x *ShardBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardBlock.ProtoReflect.Descriptor instead.
func (*ShardBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *ShardBlock) GetHeader() *ShardBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ShardBlock) GetBody() *ShardBlockBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ShardBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousBlockHash   []byte `protobuf:"bytes,1,opt,name=PreviousBlockHash,proto3" json:"PreviousBlockHash,omitempty"`
	Slot                uint64 `protobuf:"varint,2,opt,name=Slot,proto3" json:"Slot,omitempty"`
	Signature           []byte `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
	StateRoot           []byte `protobuf:"bytes,4,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	TransactionRoot     []byte `protobuf:"bytes,5,opt,name=TransactionRoot,proto3" json:"TransactionRoot,omitempty"`
	FinalizedBeaconHash []byte `protobuf:"bytes,6,opt,name=FinalizedBeaconHash,proto3" json:"FinalizedBeaconHash,omitempty"`
	Validator           uint32 `protobuf:"varint,7,opt,name=Validator,proto3" json:"Validator,omitempty"`
}

func (x *ShardBlockHeader) Reset() {
	*x = ShardBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardBlockHeader) ProtoMessage() {}

func (x *ShardBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardBlockHeader.ProtoReflect.Descriptor instead.
func (*ShardBlockHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *ShardBlockHeader) GetPreviousBlockHash() []byte {
	if x != nil {
		return x.PreviousBlockHash
	}
	return nil
}

func (x *ShardBlockHeader) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ShardBlockHeader) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ShardBlockHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ShardBlockHeader) GetTransactionRoot() []byte {
	if x != nil {
		return x.TransactionRoot
	}
	return nil
}

func (x *ShardBlockHeader) GetFinalizedBeaconHash() []byte {
	if x != nil {
		return x.FinalizedBeaconHash
	}
	return nil
}

func (x *ShardBlockHeader) GetValidator() uint32 {
	if x != nil {
		return x.Validator
	}
	return 0
}

type ShardBlockBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*ShardTransaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *ShardBlockBody) Reset() {
	*x = ShardBlockBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardBlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardBlockBody) ProtoMessage() {}

func (x *ShardBlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardBlockBody.ProtoReflect.Descriptor instead.
func (*ShardBlockBody) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *ShardBlockBody) GetTransactions() []*ShardTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ShardTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionData []byte `protobuf:"bytes,1,opt,name=TransactionData,proto3" json:"TransactionData,omitempty"`
}

func (x *ShardTransaction) Reset() {
	*x = ShardTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardTransaction) ProtoMessage() {}

func (x *ShardTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardTransaction.ProtoReflect.Descriptor instead.
func (*ShardTransaction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *ShardTransaction) GetTransactionData() []byte {
	if x != nil {
		return x.TransactionData
	}
	return nil
}

type VerificationWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             []byte   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value           []byte   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	WitnessBitfield []byte   `protobuf:"bytes,3,opt,name=WitnessBitfield,proto3" json:"WitnessBitfield,omitempty"`
	WitnessHashes   [][]byte `protobuf:"bytes,4,rep,name=WitnessHashes,proto3" json:"WitnessHashes,omitempty"`
	LastLevel       uint32   `protobuf:"varint,5,opt,name=LastLevel,proto3" json:"LastLevel,omitempty"`
}

func (x *VerificationWitness) Reset() {
	*x = VerificationWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationWitness) ProtoMessage() {}

func (x *VerificationWitness) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationWitness.ProtoReflect.Descriptor instead.
func (*VerificationWitness) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (x *VerificationWitness) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VerificationWitness) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VerificationWitness) GetWitnessBitfield() []byte {
	if x != nil {
		return x.WitnessBitfield
	}
	return nil
}

func (x *VerificationWitness) GetWitnessHashes() [][]byte {
	if x != nil {
		return x.WitnessHashes
	}
	return nil
}

func (x *VerificationWitness) GetLastLevel() uint32 {
	if x != nil {
		return x.LastLevel
	}
	return 0
}

type UpdateWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             []byte   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	OldValue        []byte   `protobuf:"bytes,2,opt,name=OldValue,proto3" json:"OldValue,omitempty"`
	NewValue        []byte   `protobuf:"bytes,3,opt,name=NewValue,proto3" json:"NewValue,omitempty"`
	WitnessBitfield []byte   `protobuf:"bytes,4,opt,name=WitnessBitfield,proto3" json:"WitnessBitfield,omitempty"`
	WitnessHashes   [][]byte `protobuf:"bytes,5,rep,name=WitnessHashes,proto3" json:"WitnessHashes,omitempty"`
	LastLevel       uint32   `protobuf:"varint,6,opt,name=LastLevel,proto3" json:"LastLevel,omitempty"`
}

func (x *UpdateWitness) Reset() {
	*x = UpdateWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWitness) ProtoMessage() {}

func (x *UpdateWitness) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWitness.ProtoReflect.Descriptor instead.
func (*UpdateWitness) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateWitness) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateWitness) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *UpdateWitness) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *UpdateWitness) GetWitnessBitfield() []byte {
	if x != nil {
		return x.WitnessBitfield
	}
	return nil
}

func (x *UpdateWitness) GetWitnessHashes() [][]byte {
	if x != nil {
		return x.WitnessHashes
	}
	return nil
}

func (x *UpdateWitness) GetLastLevel() uint32 {
	if x != nil {
		return x.LastLevel
	}
	return 0
}

type TransactionPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationWitnesses []*VerificationWitness `protobuf:"bytes,1,rep,name=VerificationWitnesses,proto3" json:"VerificationWitnesses,omitempty"`
	UpdateWitnesses       []*UpdateWitness       `protobuf:"bytes,2,rep,name=UpdateWitnesses,proto3" json:"UpdateWitnesses,omitempty"`
	Transactions          []*ShardTransaction    `protobuf:"bytes,3,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	StartRoot             []byte                 `protobuf:"bytes,4,opt,name=StartRoot,proto3" json:"StartRoot,omitempty"`
	EndRoot               []byte                 `protobuf:"bytes,5,opt,name=EndRoot,proto3" json:"EndRoot,omitempty"`
}

func (x *TransactionPackage) Reset() {
	*x = TransactionPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPackage) ProtoMessage() {}

func (x *TransactionPackage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPackage.ProtoReflect.Descriptor instead.
func (*TransactionPackage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *TransactionPackage) GetVerificationWitnesses() []*VerificationWitness {
	if x != nil {
		return x.VerificationWitnesses
	}
	return nil
}

func (x *TransactionPackage) GetUpdateWitnesses() []*UpdateWitness {
	if x != nil {
		return x.UpdateWitnesses
	}
	return nil
}

func (x *TransactionPackage) GetTransactions() []*ShardTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *TransactionPackage) GetStartRoot() []byte {
	if x != nil {
		return x.StartRoot
	}
	return nil
}

func (x *TransactionPackage) GetEndRoot() []byte {
	if x != nil {
		return x.EndRoot
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x6c, 0x0a, 0x12, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x6c,
	0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x53, 0x6c, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74,
	0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12,
	0x2e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x31, 0x12,
	0x3c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x22, 0xf8, 0x01,
	0x0a, 0x11, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x43, 0x30, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x43, 0x30, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x43, 0x31, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x1d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x43, 0x31, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x05, 0x56, 0x6f,
	0x74, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x30, 0x12, 0x2b, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x56,
	0x6f, 0x74, 0x65, 0x31, 0x22, 0xeb, 0x02, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x5f, 0x0a, 0x1c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x42,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x6f, 0x43, 0x42, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x6f, 0x43,
	0x42, 0x69, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x15,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x42, 0x69, 0x74,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67,
	0x22, 0x95, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x50,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x04, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x53, 0x0a, 0x05,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb5, 0x02, 0x0a, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x61, 0x73, 0x70, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x43,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27,
	0x0a, 0x08, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x08, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x74,
	0x52, 0x05, 0x45, 0x78, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x78, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x50, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x09,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x45, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x43,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x76, 0x0a,
	0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x13, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x22, 0x6f, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x42, 0x69, 0x74,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xa2, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x4d, 0x69, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x4d, 0x69, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x4d, 0x69, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x61,
	0x6f, 0x4d, 0x69, 0x78, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4a, 0x75, 0x73, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x4a, 0x75,
	0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x4a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x10, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x52, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x12,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x11, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x19, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x12, 0x36, 0x0a, 0x0c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0c, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x72, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90,
	0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x22, 0x62, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x2c, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x8a, 0x02, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c,
	0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xab, 0x01, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x69,
	0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_common_proto_goTypes = []interface{}{
	(*SlotNumberResponse)(nil),           // 0: pb.SlotNumberResponse
	(*ConnectMessage)(nil),               // 1: pb.ConnectMessage
	(*ListeningAddressesResponse)(nil),   // 2: pb.ListeningAddressesResponse
	(*ProposalSignedData)(nil),           // 3: pb.ProposalSignedData
	(*ProposerSlashing)(nil),             // 4: pb.ProposerSlashing
	(*SlashableVoteData)(nil),            // 5: pb.SlashableVoteData
	(*CasperSlashing)(nil),               // 6: pb.CasperSlashing
	(*AttestationData)(nil),              // 7: pb.AttestationData
	(*AttestationDataAndCustodyBit)(nil), // 8: pb.AttestationDataAndCustodyBit
	(*Attestation)(nil),                  // 9: pb.Attestation
	(*DepositParameters)(nil),            // 10: pb.DepositParameters
	(*Deposit)(nil),                      // 11: pb.Deposit
	(*Exit)(nil),                         // 12: pb.Exit
	(*Block)(nil),                        // 13: pb.Block
	(*BlockHeader)(nil),                  // 14: pb.BlockHeader
	(*BlockBody)(nil),                    // 15: pb.BlockBody
	(*ForkData)(nil),                     // 16: pb.ForkData
	(*Validator)(nil),                    // 17: pb.Validator
	(*ShardCommittee)(nil),               // 18: pb.ShardCommittee
	(*ShardCommitteesForSlot)(nil),       // 19: pb.ShardCommitteesForSlot
	(*PersistentCommitteesForSlot)(nil),  // 20: pb.PersistentCommitteesForSlot
	(*Crosslink)(nil),                    // 21: pb.Crosslink
	(*PendingAttestation)(nil),           // 22: pb.PendingAttestation
	(*State)(nil),                        // 23: pb.State
	(*ValidatorRegistryDeltaBlock)(nil),  // 24: pb.ValidatorRegistryDeltaBlock
	(*AttestationRequest)(nil),           // 25: pb.AttestationRequest
	(*VoteData)(nil),                     // 26: pb.VoteData
	(*AggregatedVote)(nil),               // 27: pb.AggregatedVote
	(*ActiveProposal)(nil),               // 28: pb.ActiveProposal
	(*ShardBlock)(nil),                   // 29: pb.ShardBlock
	(*ShardBlockHeader)(nil),             // 30: pb.ShardBlockHeader
	(*ShardBlockBody)(nil),               // 31: pb.ShardBlockBody
	(*ShardTransaction)(nil),             // 32: pb.ShardTransaction
	(*VerificationWitness)(nil),          // 33: pb.VerificationWitness
	(*UpdateWitness)(nil),                // 34: pb.UpdateWitness
	(*TransactionPackage)(nil),           // 35: pb.TransactionPackage
}
var file_common_proto_depIdxs = []int32{
	3,  // 0: pb.ProposerSlashing.ProposalData1:type_name -> pb.ProposalSignedData
	3,  // 1: pb.ProposerSlashing.ProposalData2:type_name -> pb.ProposalSignedData
	7,  // 2: pb.SlashableVoteData.Data:type_name -> pb.AttestationData
	5,  // 3: pb.CasperSlashing.Vote0:type_name -> pb.SlashableVoteData
	5,  // 4: pb.CasperSlashing.Vote1:type_name -> pb.SlashableVoteData
	7,  // 5: pb.AttestationDataAndCustodyBit.Data:type_name -> pb.AttestationData
	7,  // 6: pb.Attestation.Data:type_name -> pb.AttestationData
	10, // 7: pb.Deposit.Parameters:type_name -> pb.DepositParameters
	14, // 8: pb.Block.Header:type_name -> pb.BlockHeader
	15, // 9: pb.Block.Body:type_name -> pb.BlockBody
	9,  // 10: pb.BlockBody.Attestations:type_name -> pb.Attestation
	4,  // 11: pb.BlockBody.ProposerSlashings:type_name -> pb.ProposerSlashing
	6,  // 12: pb.BlockBody.CasperSlashings:type_name -> pb.CasperSlashing
	11, // 13: pb.BlockBody.Deposits:type_name -> pb.Deposit
	12, // 14: pb.BlockBody.Exits:type_name -> pb.Exit
	27, // 15: pb.BlockBody.Votes:type_name -> pb.AggregatedVote
	18, // 16: pb.ShardCommitteesForSlot.Committees:type_name -> pb.ShardCommittee
	7,  // 17: pb.PendingAttestation.Data:type_name -> pb.AttestationData
	16, // 18: pb.State.ForkData:type_name -> pb.ForkData
	17, // 19: pb.State.ValidatorRegistry:type_name -> pb.Validator
	19, // 20: pb.State.ShardCommittees:type_name -> pb.ShardCommitteesForSlot
	21, // 21: pb.State.LatestCrosslinks:type_name -> pb.Crosslink
	21, // 22: pb.State.PreviousCrosslinks:type_name -> pb.Crosslink
	22, // 23: pb.State.CurrentEpochAttestations:type_name -> pb.PendingAttestation
	22, // 24: pb.State.PreviousEpochAttestations:type_name -> pb.PendingAttestation
	28, // 25: pb.State.Proposals:type_name -> pb.ActiveProposal
	27, // 26: pb.State.PendingVotes:type_name -> pb.AggregatedVote
	26, // 27: pb.AggregatedVote.Data:type_name -> pb.VoteData
	26, // 28: pb.ActiveProposal.Data:type_name -> pb.VoteData
	30, // 29: pb.ShardBlock.Header:type_name -> pb.ShardBlockHeader
	31, // 30: pb.ShardBlock.Body:type_name -> pb.ShardBlockBody
	32, // 31: pb.ShardBlockBody.Transactions:type_name -> pb.ShardTransaction
	33, // 32: pb.TransactionPackage.VerificationWitnesses:type_name -> pb.VerificationWitness
	34, // 33: pb.TransactionPackage.UpdateWitnesses:type_name -> pb.UpdateWitness
	32, // 34: pb.TransactionPackage.Transactions:type_name -> pb.ShardTransaction
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListeningAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalSignedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerSlashing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlashableVoteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CasperSlashing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationDataAndCustodyBit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardCommittee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardCommitteesForSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentCommitteesForSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crosslink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingAttestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorRegistryDeltaBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardBlockBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
