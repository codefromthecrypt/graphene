// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.2
// source: beaconrpc.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetValidatorProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof         *ValidatorProof `protobuf:"bytes,1,opt,name=Proof,proto3" json:"Proof,omitempty"`
	FinalizedHash []byte          `protobuf:"bytes,2,opt,name=FinalizedHash,proto3" json:"FinalizedHash,omitempty"`
}

func (x *GetValidatorProofResponse) Reset() {
	*x = GetValidatorProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorProofResponse) ProtoMessage() {}

func (x *GetValidatorProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorProofResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorProofResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetValidatorProofResponse) GetProof() *ValidatorProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *GetValidatorProofResponse) GetFinalizedHash() []byte {
	if x != nil {
		return x.FinalizedHash
	}
	return nil
}

type GetValidatorProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorID uint32 `protobuf:"varint,1,opt,name=ValidatorID,proto3" json:"ValidatorID,omitempty"`
}

func (x *GetValidatorProofRequest) Reset() {
	*x = GetValidatorProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorProofRequest) ProtoMessage() {}

func (x *GetValidatorProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorProofRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorProofRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetValidatorProofRequest) GetValidatorID() uint32 {
	if x != nil {
		return x.ValidatorID
	}
	return 0
}

type GetValidatorRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *GetValidatorRootRequest) Reset() {
	*x = GetValidatorRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRootRequest) ProtoMessage() {}

func (x *GetValidatorRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRootRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorRootRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetValidatorRootRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetValidatorRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorRoot []byte `protobuf:"bytes,2,opt,name=ValidatorRoot,proto3" json:"ValidatorRoot,omitempty"`
}

func (x *GetValidatorRootResponse) Reset() {
	*x = GetValidatorRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRootResponse) ProtoMessage() {}

func (x *GetValidatorRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRootResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorRootResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetValidatorRootResponse) GetValidatorRoot() []byte {
	if x != nil {
		return x.ValidatorRoot
	}
	return nil
}

type GenesisTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisTime uint64 `protobuf:"varint,1,opt,name=GenesisTime,proto3" json:"GenesisTime,omitempty"`
}

func (x *GenesisTimeResponse) Reset() {
	*x = GenesisTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisTimeResponse) ProtoMessage() {}

func (x *GenesisTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisTimeResponse.ProtoReflect.Descriptor instead.
func (*GenesisTimeResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{4}
}

func (x *GenesisTimeResponse) GetGenesisTime() uint64 {
	if x != nil {
		return x.GenesisTime
	}
	return 0
}

type CrosslinkStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID uint64 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
}

func (x *CrosslinkStreamRequest) Reset() {
	*x = CrosslinkStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrosslinkStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrosslinkStreamRequest) ProtoMessage() {}

func (x *CrosslinkStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrosslinkStreamRequest.ProtoReflect.Descriptor instead.
func (*CrosslinkStreamRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{5}
}

func (x *CrosslinkStreamRequest) GetShardID() uint64 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

type CrosslinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	Slot      uint64 `protobuf:"varint,2,opt,name=Slot,proto3" json:"Slot,omitempty"`
}

func (x *CrosslinkMessage) Reset() {
	*x = CrosslinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrosslinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrosslinkMessage) ProtoMessage() {}

func (x *CrosslinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrosslinkMessage.ProtoReflect.Descriptor instead.
func (*CrosslinkMessage) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{6}
}

func (x *CrosslinkMessage) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CrosslinkMessage) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type MempoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBlockHash []byte `protobuf:"bytes,1,opt,name=LastBlockHash,proto3" json:"LastBlockHash,omitempty"`
}

func (x *MempoolRequest) Reset() {
	*x = MempoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolRequest) ProtoMessage() {}

func (x *MempoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolRequest.ProtoReflect.Descriptor instead.
func (*MempoolRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{7}
}

func (x *MempoolRequest) GetLastBlockHash() []byte {
	if x != nil {
		return x.LastBlockHash
	}
	return nil
}

type GetValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetValidatorRequest) Reset() {
	*x = GetValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRequest) ProtoMessage() {}

func (x *GetValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetValidatorRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlockRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=Block,proto3" json:"Block,omitempty"`
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetBlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetProposerForSlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
}

func (x *GetProposerForSlotRequest) Reset() {
	*x = GetProposerForSlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposerForSlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposerForSlotRequest) ProtoMessage() {}

func (x *GetProposerForSlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposerForSlotRequest.ProtoReflect.Descriptor instead.
func (*GetProposerForSlotRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetProposerForSlotRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type GetProposerForSlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposer uint32 `protobuf:"varint,1,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
}

func (x *GetProposerForSlotResponse) Reset() {
	*x = GetProposerForSlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposerForSlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposerForSlotResponse) ProtoMessage() {}

func (x *GetProposerForSlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposerForSlotResponse.ProtoReflect.Descriptor instead.
func (*GetProposerForSlotResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetProposerForSlotResponse) GetProposer() uint32 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

type EpochInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochIndex uint64 `protobuf:"varint,1,opt,name=EpochIndex,proto3" json:"EpochIndex,omitempty"`
}

func (x *EpochInformationRequest) Reset() {
	*x = EpochInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochInformationRequest) ProtoMessage() {}

func (x *EpochInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochInformationRequest.ProtoReflect.Descriptor instead.
func (*EpochInformationRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{13}
}

func (x *EpochInformationRequest) GetEpochIndex() uint64 {
	if x != nil {
		return x.EpochIndex
	}
	return 0
}

type EpochInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasEpochInformation bool              `protobuf:"varint,1,opt,name=HasEpochInformation,proto3" json:"HasEpochInformation,omitempty"`
	Information         *EpochInformation `protobuf:"bytes,2,opt,name=Information,proto3" json:"Information,omitempty"`
}

func (x *EpochInformationResponse) Reset() {
	*x = EpochInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochInformationResponse) ProtoMessage() {}

func (x *EpochInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochInformationResponse.ProtoReflect.Descriptor instead.
func (*EpochInformationResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{14}
}

func (x *EpochInformationResponse) GetHasEpochInformation() bool {
	if x != nil {
		return x.HasEpochInformation
	}
	return false
}

func (x *EpochInformationResponse) GetInformation() *EpochInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

type EpochInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardCommitteesForSlots     []*ShardCommitteesForSlot `protobuf:"bytes,1,rep,name=ShardCommitteesForSlots,proto3" json:"ShardCommitteesForSlots,omitempty"`
	Slot                        int64                     `protobuf:"varint,2,opt,name=Slot,proto3" json:"Slot,omitempty"`
	LatestCrosslinks            []*Crosslink              `protobuf:"bytes,3,rep,name=LatestCrosslinks,proto3" json:"LatestCrosslinks,omitempty"`
	JustifiedEpoch              uint64                    `protobuf:"varint,4,opt,name=JustifiedEpoch,proto3" json:"JustifiedEpoch,omitempty"`
	JustifiedHash               []byte                    `protobuf:"bytes,5,opt,name=JustifiedHash,proto3" json:"JustifiedHash,omitempty"`
	TargetHash                  []byte                    `protobuf:"bytes,6,opt,name=TargetHash,proto3" json:"TargetHash,omitempty"`
	PreviousTargetHash          []byte                    `protobuf:"bytes,7,opt,name=PreviousTargetHash,proto3" json:"PreviousTargetHash,omitempty"`
	PreviousJustifiedEpoch      uint64                    `protobuf:"varint,8,opt,name=PreviousJustifiedEpoch,proto3" json:"PreviousJustifiedEpoch,omitempty"`
	PreviousJustifiedHash       []byte                    `protobuf:"bytes,9,opt,name=PreviousJustifiedHash,proto3" json:"PreviousJustifiedHash,omitempty"`
	PreviousCrosslinks          []*Crosslink              `protobuf:"bytes,10,rep,name=PreviousCrosslinks,proto3" json:"PreviousCrosslinks,omitempty"`
	ShardCommitteesForNextEpoch []*ShardCommitteesForSlot `protobuf:"bytes,11,rep,name=ShardCommitteesForNextEpoch,proto3" json:"ShardCommitteesForNextEpoch,omitempty"`
}

func (x *EpochInformation) Reset() {
	*x = EpochInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochInformation) ProtoMessage() {}

func (x *EpochInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochInformation.ProtoReflect.Descriptor instead.
func (*EpochInformation) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{15}
}

func (x *EpochInformation) GetShardCommitteesForSlots() []*ShardCommitteesForSlot {
	if x != nil {
		return x.ShardCommitteesForSlots
	}
	return nil
}

func (x *EpochInformation) GetSlot() int64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *EpochInformation) GetLatestCrosslinks() []*Crosslink {
	if x != nil {
		return x.LatestCrosslinks
	}
	return nil
}

func (x *EpochInformation) GetJustifiedEpoch() uint64 {
	if x != nil {
		return x.JustifiedEpoch
	}
	return 0
}

func (x *EpochInformation) GetJustifiedHash() []byte {
	if x != nil {
		return x.JustifiedHash
	}
	return nil
}

func (x *EpochInformation) GetTargetHash() []byte {
	if x != nil {
		return x.TargetHash
	}
	return nil
}

func (x *EpochInformation) GetPreviousTargetHash() []byte {
	if x != nil {
		return x.PreviousTargetHash
	}
	return nil
}

func (x *EpochInformation) GetPreviousJustifiedEpoch() uint64 {
	if x != nil {
		return x.PreviousJustifiedEpoch
	}
	return 0
}

func (x *EpochInformation) GetPreviousJustifiedHash() []byte {
	if x != nil {
		return x.PreviousJustifiedHash
	}
	return nil
}

func (x *EpochInformation) GetPreviousCrosslinks() []*Crosslink {
	if x != nil {
		return x.PreviousCrosslinks
	}
	return nil
}

func (x *EpochInformation) GetShardCommitteesForNextEpoch() []*ShardCommitteesForSlot {
	if x != nil {
		return x.ShardCommitteesForNextEpoch
	}
	return nil
}

type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{16}
}

func (x *DisconnectResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetCommitteesForSlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
}

func (x *GetCommitteesForSlotRequest) Reset() {
	*x = GetCommitteesForSlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitteesForSlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitteesForSlotRequest) ProtoMessage() {}

func (x *GetCommitteesForSlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitteesForSlotRequest.ProtoReflect.Descriptor instead.
func (*GetCommitteesForSlotRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetCommitteesForSlotRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type GetSlotAndShardAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorID uint32 `protobuf:"varint,1,opt,name=ValidatorID,proto3" json:"ValidatorID,omitempty"`
}

func (x *GetSlotAndShardAssignmentRequest) Reset() {
	*x = GetSlotAndShardAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlotAndShardAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlotAndShardAssignmentRequest) ProtoMessage() {}

func (x *GetSlotAndShardAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlotAndShardAssignmentRequest.ProtoReflect.Descriptor instead.
func (*GetSlotAndShardAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetSlotAndShardAssignmentRequest) GetValidatorID() uint32 {
	if x != nil {
		return x.ValidatorID
	}
	return 0
}

type SubmitBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=Block,proto3" json:"Block,omitempty"`
}

func (x *SubmitBlockRequest) Reset() {
	*x = SubmitBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockRequest) ProtoMessage() {}

func (x *SubmitBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockRequest.ProtoReflect.Descriptor instead.
func (*SubmitBlockRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{19}
}

func (x *SubmitBlockRequest) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type SubmitBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *SubmitBlockResponse) Reset() {
	*x = SubmitBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockResponse) ProtoMessage() {}

func (x *SubmitBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockResponse.ProtoReflect.Descriptor instead.
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{20}
}

func (x *SubmitBlockResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetBlockHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotNumber uint64 `protobuf:"varint,1,opt,name=SlotNumber,proto3" json:"SlotNumber,omitempty"`
}

func (x *GetBlockHashRequest) Reset() {
	*x = GetBlockHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashRequest) ProtoMessage() {}

func (x *GetBlockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHashRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{21}
}

func (x *GetBlockHashRequest) GetSlotNumber() uint64 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

type GetBlockHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *GetBlockHashResponse) Reset() {
	*x = GetBlockHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashResponse) ProtoMessage() {}

func (x *GetBlockHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHashResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{22}
}

func (x *GetBlockHashResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetValidatorAtIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *GetValidatorAtIndexRequest) Reset() {
	*x = GetValidatorAtIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorAtIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorAtIndexRequest) ProtoMessage() {}

func (x *GetValidatorAtIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorAtIndexRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorAtIndexRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetValidatorAtIndexRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetValidatorAtIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator *Validator `protobuf:"bytes,1,opt,name=Validator,proto3" json:"Validator,omitempty"`
}

func (x *GetValidatorAtIndexResponse) Reset() {
	*x = GetValidatorAtIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorAtIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorAtIndexResponse) ProtoMessage() {}

func (x *GetValidatorAtIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorAtIndexResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorAtIndexResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{24}
}

func (x *GetValidatorAtIndexResponse) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

type GetCommitteeValidatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotNumber uint64 `protobuf:"varint,1,opt,name=SlotNumber,proto3" json:"SlotNumber,omitempty"`
	Shard      uint32 `protobuf:"varint,2,opt,name=Shard,proto3" json:"Shard,omitempty"`
}

func (x *GetCommitteeValidatorsRequest) Reset() {
	*x = GetCommitteeValidatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitteeValidatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitteeValidatorsRequest) ProtoMessage() {}

func (x *GetCommitteeValidatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitteeValidatorsRequest.ProtoReflect.Descriptor instead.
func (*GetCommitteeValidatorsRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{25}
}

func (x *GetCommitteeValidatorsRequest) GetSlotNumber() uint64 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

func (x *GetCommitteeValidatorsRequest) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{26}
}

func (x *GetStateResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

type GetStateRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *GetStateRootRequest) Reset() {
	*x = GetStateRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRootRequest) ProtoMessage() {}

func (x *GetStateRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRootRequest.ProtoReflect.Descriptor instead.
func (*GetStateRootRequest) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{27}
}

func (x *GetStateRootRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetStateRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRoot []byte `protobuf:"bytes,1,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
}

func (x *GetStateRootResponse) Reset() {
	*x = GetStateRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRootResponse) ProtoMessage() {}

func (x *GetStateRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRootResponse.ProtoReflect.Descriptor instead.
func (*GetStateRootResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{28}
}

func (x *GetStateRootResponse) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

type GetCommitteeValidatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*Validator `protobuf:"bytes,1,rep,name=Validators,proto3" json:"Validators,omitempty"`
}

func (x *GetCommitteeValidatorsResponse) Reset() {
	*x = GetCommitteeValidatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitteeValidatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitteeValidatorsResponse) ProtoMessage() {}

func (x *GetCommitteeValidatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitteeValidatorsResponse.ProtoReflect.Descriptor instead.
func (*GetCommitteeValidatorsResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{29}
}

func (x *GetCommitteeValidatorsResponse) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type GetCommitteeValidatorIndicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []uint32 `protobuf:"varint,1,rep,packed,name=Validators,proto3" json:"Validators,omitempty"`
}

func (x *GetCommitteeValidatorIndicesResponse) Reset() {
	*x = GetCommitteeValidatorIndicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beaconrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitteeValidatorIndicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitteeValidatorIndicesResponse) ProtoMessage() {}

func (x *GetCommitteeValidatorIndicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beaconrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitteeValidatorIndicesResponse.ProtoReflect.Descriptor instead.
func (*GetCommitteeValidatorIndicesResponse) Descriptor() ([]byte, []int) {
	return file_beaconrpc_proto_rawDescGZIP(), []int{30}
}

func (x *GetCommitteeValidatorIndicesResponse) GetValidators() []uint32 {
	if x != nil {
		return x.Validators
	}
	return nil
}

var File_beaconrpc_proto protoreflect.FileDescriptor

var file_beaconrpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3c, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x40, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x32, 0x0a, 0x16, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x36, 0x0a, 0x0e, 0x4d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x33, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x38, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x22,
	0x39, 0x0a, 0x17, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x61, 0x73, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x48, 0x61, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xe0, 0x04, 0x0a, 0x10, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x17, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x39, 0x0a, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4a,
	0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4a, 0x75, 0x73, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69,
	0x6e, 0x6b, 0x52, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x5c, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x44, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x35, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x33, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x35, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x32, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x4a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x34, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0x4f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x46, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x32, 0x8e, 0x0a, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x50, 0x43, 0x12, 0x3e,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c,
	0x69, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beaconrpc_proto_rawDescOnce sync.Once
	file_beaconrpc_proto_rawDescData = file_beaconrpc_proto_rawDesc
)

func file_beaconrpc_proto_rawDescGZIP() []byte {
	file_beaconrpc_proto_rawDescOnce.Do(func() {
		file_beaconrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_beaconrpc_proto_rawDescData)
	})
	return file_beaconrpc_proto_rawDescData
}

var file_beaconrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_beaconrpc_proto_goTypes = []interface{}{
	(*GetValidatorProofResponse)(nil),            // 0: pb.GetValidatorProofResponse
	(*GetValidatorProofRequest)(nil),             // 1: pb.GetValidatorProofRequest
	(*GetValidatorRootRequest)(nil),              // 2: pb.GetValidatorRootRequest
	(*GetValidatorRootResponse)(nil),             // 3: pb.GetValidatorRootResponse
	(*GenesisTimeResponse)(nil),                  // 4: pb.GenesisTimeResponse
	(*CrosslinkStreamRequest)(nil),               // 5: pb.CrosslinkStreamRequest
	(*CrosslinkMessage)(nil),                     // 6: pb.CrosslinkMessage
	(*MempoolRequest)(nil),                       // 7: pb.MempoolRequest
	(*GetValidatorRequest)(nil),                  // 8: pb.GetValidatorRequest
	(*GetBlockRequest)(nil),                      // 9: pb.GetBlockRequest
	(*GetBlockResponse)(nil),                     // 10: pb.GetBlockResponse
	(*GetProposerForSlotRequest)(nil),            // 11: pb.GetProposerForSlotRequest
	(*GetProposerForSlotResponse)(nil),           // 12: pb.GetProposerForSlotResponse
	(*EpochInformationRequest)(nil),              // 13: pb.EpochInformationRequest
	(*EpochInformationResponse)(nil),             // 14: pb.EpochInformationResponse
	(*EpochInformation)(nil),                     // 15: pb.EpochInformation
	(*DisconnectResponse)(nil),                   // 16: pb.DisconnectResponse
	(*GetCommitteesForSlotRequest)(nil),          // 17: pb.GetCommitteesForSlotRequest
	(*GetSlotAndShardAssignmentRequest)(nil),     // 18: pb.GetSlotAndShardAssignmentRequest
	(*SubmitBlockRequest)(nil),                   // 19: pb.SubmitBlockRequest
	(*SubmitBlockResponse)(nil),                  // 20: pb.SubmitBlockResponse
	(*GetBlockHashRequest)(nil),                  // 21: pb.GetBlockHashRequest
	(*GetBlockHashResponse)(nil),                 // 22: pb.GetBlockHashResponse
	(*GetValidatorAtIndexRequest)(nil),           // 23: pb.GetValidatorAtIndexRequest
	(*GetValidatorAtIndexResponse)(nil),          // 24: pb.GetValidatorAtIndexResponse
	(*GetCommitteeValidatorsRequest)(nil),        // 25: pb.GetCommitteeValidatorsRequest
	(*GetStateResponse)(nil),                     // 26: pb.GetStateResponse
	(*GetStateRootRequest)(nil),                  // 27: pb.GetStateRootRequest
	(*GetStateRootResponse)(nil),                 // 28: pb.GetStateRootResponse
	(*GetCommitteeValidatorsResponse)(nil),       // 29: pb.GetCommitteeValidatorsResponse
	(*GetCommitteeValidatorIndicesResponse)(nil), // 30: pb.GetCommitteeValidatorIndicesResponse
	(*ValidatorProof)(nil),                       // 31: pb.ValidatorProof
	(*Block)(nil),                                // 32: pb.Block
	(*ShardCommitteesForSlot)(nil),               // 33: pb.ShardCommitteesForSlot
	(*Crosslink)(nil),                            // 34: pb.Crosslink
	(*Validator)(nil),                            // 35: pb.Validator
	(*State)(nil),                                // 36: pb.State
	(*empty.Empty)(nil),                          // 37: google.protobuf.Empty
	(*Attestation)(nil),                          // 38: pb.Attestation
	(*ConnectMessage)(nil),                       // 39: pb.ConnectMessage
	(*SlotNumberResponse)(nil),                   // 40: pb.SlotNumberResponse
	(*ForkData)(nil),                             // 41: pb.ForkData
	(*BlockBody)(nil),                            // 42: pb.BlockBody
	(*ListeningAddressesResponse)(nil),           // 43: pb.ListeningAddressesResponse
}
var file_beaconrpc_proto_depIdxs = []int32{
	31, // 0: pb.GetValidatorProofResponse.Proof:type_name -> pb.ValidatorProof
	32, // 1: pb.GetBlockResponse.Block:type_name -> pb.Block
	15, // 2: pb.EpochInformationResponse.Information:type_name -> pb.EpochInformation
	33, // 3: pb.EpochInformation.ShardCommitteesForSlots:type_name -> pb.ShardCommitteesForSlot
	34, // 4: pb.EpochInformation.LatestCrosslinks:type_name -> pb.Crosslink
	34, // 5: pb.EpochInformation.PreviousCrosslinks:type_name -> pb.Crosslink
	33, // 6: pb.EpochInformation.ShardCommitteesForNextEpoch:type_name -> pb.ShardCommitteesForSlot
	32, // 7: pb.SubmitBlockRequest.Block:type_name -> pb.Block
	35, // 8: pb.GetValidatorAtIndexResponse.Validator:type_name -> pb.Validator
	36, // 9: pb.GetStateResponse.state:type_name -> pb.State
	35, // 10: pb.GetCommitteeValidatorsResponse.Validators:type_name -> pb.Validator
	19, // 11: pb.BlockchainRPC.SubmitBlock:input_type -> pb.SubmitBlockRequest
	37, // 12: pb.BlockchainRPC.GetSlotNumber:input_type -> google.protobuf.Empty
	21, // 13: pb.BlockchainRPC.GetBlockHash:input_type -> pb.GetBlockHashRequest
	37, // 14: pb.BlockchainRPC.GetLastBlockHash:input_type -> google.protobuf.Empty
	37, // 15: pb.BlockchainRPC.GetState:input_type -> google.protobuf.Empty
	27, // 16: pb.BlockchainRPC.GetStateRoot:input_type -> pb.GetStateRootRequest
	2,  // 17: pb.BlockchainRPC.GetValidatorRoot:input_type -> pb.GetValidatorRootRequest
	13, // 18: pb.BlockchainRPC.GetEpochInformation:input_type -> pb.EpochInformationRequest
	37, // 19: pb.BlockchainRPC.GetForkData:input_type -> google.protobuf.Empty
	11, // 20: pb.BlockchainRPC.GetProposerForSlot:input_type -> pb.GetProposerForSlotRequest
	9,  // 21: pb.BlockchainRPC.GetBlock:input_type -> pb.GetBlockRequest
	38, // 22: pb.BlockchainRPC.SubmitAttestation:input_type -> pb.Attestation
	7,  // 23: pb.BlockchainRPC.GetMempool:input_type -> pb.MempoolRequest
	8,  // 24: pb.BlockchainRPC.GetValidatorInformation:input_type -> pb.GetValidatorRequest
	37, // 25: pb.BlockchainRPC.GetListeningAddresses:input_type -> google.protobuf.Empty
	39, // 26: pb.BlockchainRPC.Connect:input_type -> pb.ConnectMessage
	5,  // 27: pb.BlockchainRPC.CrosslinkStream:input_type -> pb.CrosslinkStreamRequest
	37, // 28: pb.BlockchainRPC.GetGenesisTime:input_type -> google.protobuf.Empty
	1,  // 29: pb.BlockchainRPC.GetValidatorProof:input_type -> pb.GetValidatorProofRequest
	20, // 30: pb.BlockchainRPC.SubmitBlock:output_type -> pb.SubmitBlockResponse
	40, // 31: pb.BlockchainRPC.GetSlotNumber:output_type -> pb.SlotNumberResponse
	22, // 32: pb.BlockchainRPC.GetBlockHash:output_type -> pb.GetBlockHashResponse
	22, // 33: pb.BlockchainRPC.GetLastBlockHash:output_type -> pb.GetBlockHashResponse
	26, // 34: pb.BlockchainRPC.GetState:output_type -> pb.GetStateResponse
	28, // 35: pb.BlockchainRPC.GetStateRoot:output_type -> pb.GetStateRootResponse
	3,  // 36: pb.BlockchainRPC.GetValidatorRoot:output_type -> pb.GetValidatorRootResponse
	14, // 37: pb.BlockchainRPC.GetEpochInformation:output_type -> pb.EpochInformationResponse
	41, // 38: pb.BlockchainRPC.GetForkData:output_type -> pb.ForkData
	12, // 39: pb.BlockchainRPC.GetProposerForSlot:output_type -> pb.GetProposerForSlotResponse
	10, // 40: pb.BlockchainRPC.GetBlock:output_type -> pb.GetBlockResponse
	37, // 41: pb.BlockchainRPC.SubmitAttestation:output_type -> google.protobuf.Empty
	42, // 42: pb.BlockchainRPC.GetMempool:output_type -> pb.BlockBody
	35, // 43: pb.BlockchainRPC.GetValidatorInformation:output_type -> pb.Validator
	43, // 44: pb.BlockchainRPC.GetListeningAddresses:output_type -> pb.ListeningAddressesResponse
	37, // 45: pb.BlockchainRPC.Connect:output_type -> google.protobuf.Empty
	6,  // 46: pb.BlockchainRPC.CrosslinkStream:output_type -> pb.CrosslinkMessage
	4,  // 47: pb.BlockchainRPC.GetGenesisTime:output_type -> pb.GenesisTimeResponse
	0,  // 48: pb.BlockchainRPC.GetValidatorProof:output_type -> pb.GetValidatorProofResponse
	30, // [30:49] is the sub-list for method output_type
	11, // [11:30] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_beaconrpc_proto_init() }
func file_beaconrpc_proto_init() {
	if File_beaconrpc_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beaconrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrosslinkStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrosslinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposerForSlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposerForSlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitteesForSlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlotAndShardAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorAtIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorAtIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitteeValidatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitteeValidatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beaconrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitteeValidatorIndicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beaconrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_beaconrpc_proto_goTypes,
		DependencyIndexes: file_beaconrpc_proto_depIdxs,
		MessageInfos:      file_beaconrpc_proto_msgTypes,
	}.Build()
	File_beaconrpc_proto = out.File
	file_beaconrpc_proto_rawDesc = nil
	file_beaconrpc_proto_goTypes = nil
	file_beaconrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockchainRPCClient is the client API for BlockchainRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockchainRPCClient interface {
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	GetSlotNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SlotNumberResponse, error)
	GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error)
	GetLastBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBlockHashResponse, error)
	GetState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStateResponse, error)
	GetStateRoot(ctx context.Context, in *GetStateRootRequest, opts ...grpc.CallOption) (*GetStateRootResponse, error)
	GetValidatorRoot(ctx context.Context, in *GetValidatorRootRequest, opts ...grpc.CallOption) (*GetValidatorRootResponse, error)
	GetEpochInformation(ctx context.Context, in *EpochInformationRequest, opts ...grpc.CallOption) (*EpochInformationResponse, error)
	GetForkData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ForkData, error)
	GetProposerForSlot(ctx context.Context, in *GetProposerForSlotRequest, opts ...grpc.CallOption) (*GetProposerForSlotResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	SubmitAttestation(ctx context.Context, in *Attestation, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMempool(ctx context.Context, in *MempoolRequest, opts ...grpc.CallOption) (*BlockBody, error)
	GetValidatorInformation(ctx context.Context, in *GetValidatorRequest, opts ...grpc.CallOption) (*Validator, error)
	GetListeningAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error)
	Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	CrosslinkStream(ctx context.Context, in *CrosslinkStreamRequest, opts ...grpc.CallOption) (BlockchainRPC_CrosslinkStreamClient, error)
	GetGenesisTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenesisTimeResponse, error)
	GetValidatorProof(ctx context.Context, in *GetValidatorProofRequest, opts ...grpc.CallOption) (*GetValidatorProofResponse, error)
}

type blockchainRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainRPCClient(cc grpc.ClientConnInterface) BlockchainRPCClient {
	return &blockchainRPCClient{cc}
}

func (c *blockchainRPCClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetSlotNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SlotNumberResponse, error) {
	out := new(SlotNumberResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetSlotNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {
	out := new(GetBlockHashResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetLastBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {
	out := new(GetBlockHashResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetLastBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetStateRoot(ctx context.Context, in *GetStateRootRequest, opts ...grpc.CallOption) (*GetStateRootResponse, error) {
	out := new(GetStateRootResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetStateRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetValidatorRoot(ctx context.Context, in *GetValidatorRootRequest, opts ...grpc.CallOption) (*GetValidatorRootResponse, error) {
	out := new(GetValidatorRootResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetValidatorRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetEpochInformation(ctx context.Context, in *EpochInformationRequest, opts ...grpc.CallOption) (*EpochInformationResponse, error) {
	out := new(EpochInformationResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetEpochInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetForkData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ForkData, error) {
	out := new(ForkData)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetForkData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetProposerForSlot(ctx context.Context, in *GetProposerForSlotRequest, opts ...grpc.CallOption) (*GetProposerForSlotResponse, error) {
	out := new(GetProposerForSlotResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetProposerForSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) SubmitAttestation(ctx context.Context, in *Attestation, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/SubmitAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetMempool(ctx context.Context, in *MempoolRequest, opts ...grpc.CallOption) (*BlockBody, error) {
	out := new(BlockBody)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetMempool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetValidatorInformation(ctx context.Context, in *GetValidatorRequest, opts ...grpc.CallOption) (*Validator, error) {
	out := new(Validator)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetValidatorInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetListeningAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error) {
	out := new(ListeningAddressesResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetListeningAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) CrosslinkStream(ctx context.Context, in *CrosslinkStreamRequest, opts ...grpc.CallOption) (BlockchainRPC_CrosslinkStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockchainRPC_serviceDesc.Streams[0], "/pb.BlockchainRPC/CrosslinkStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainRPCCrosslinkStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainRPC_CrosslinkStreamClient interface {
	Recv() (*CrosslinkMessage, error)
	grpc.ClientStream
}

type blockchainRPCCrosslinkStreamClient struct {
	grpc.ClientStream
}

func (x *blockchainRPCCrosslinkStreamClient) Recv() (*CrosslinkMessage, error) {
	m := new(CrosslinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainRPCClient) GetGenesisTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenesisTimeResponse, error) {
	out := new(GenesisTimeResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetGenesisTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainRPCClient) GetValidatorProof(ctx context.Context, in *GetValidatorProofRequest, opts ...grpc.CallOption) (*GetValidatorProofResponse, error) {
	out := new(GetValidatorProofResponse)
	err := c.cc.Invoke(ctx, "/pb.BlockchainRPC/GetValidatorProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainRPCServer is the server API for BlockchainRPC service.
type BlockchainRPCServer interface {
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	GetSlotNumber(context.Context, *empty.Empty) (*SlotNumberResponse, error)
	GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error)
	GetLastBlockHash(context.Context, *empty.Empty) (*GetBlockHashResponse, error)
	GetState(context.Context, *empty.Empty) (*GetStateResponse, error)
	GetStateRoot(context.Context, *GetStateRootRequest) (*GetStateRootResponse, error)
	GetValidatorRoot(context.Context, *GetValidatorRootRequest) (*GetValidatorRootResponse, error)
	GetEpochInformation(context.Context, *EpochInformationRequest) (*EpochInformationResponse, error)
	GetForkData(context.Context, *empty.Empty) (*ForkData, error)
	GetProposerForSlot(context.Context, *GetProposerForSlotRequest) (*GetProposerForSlotResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	SubmitAttestation(context.Context, *Attestation) (*empty.Empty, error)
	GetMempool(context.Context, *MempoolRequest) (*BlockBody, error)
	GetValidatorInformation(context.Context, *GetValidatorRequest) (*Validator, error)
	GetListeningAddresses(context.Context, *empty.Empty) (*ListeningAddressesResponse, error)
	Connect(context.Context, *ConnectMessage) (*empty.Empty, error)
	CrosslinkStream(*CrosslinkStreamRequest, BlockchainRPC_CrosslinkStreamServer) error
	GetGenesisTime(context.Context, *empty.Empty) (*GenesisTimeResponse, error)
	GetValidatorProof(context.Context, *GetValidatorProofRequest) (*GetValidatorProofResponse, error)
}

// UnimplementedBlockchainRPCServer can be embedded to have forward compatible implementations.
type UnimplementedBlockchainRPCServer struct {
}

func (*UnimplementedBlockchainRPCServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetSlotNumber(context.Context, *empty.Empty) (*SlotNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotNumber not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetLastBlockHash(context.Context, *empty.Empty) (*GetBlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlockHash not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetState(context.Context, *empty.Empty) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetStateRoot(context.Context, *GetStateRootRequest) (*GetStateRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateRoot not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetValidatorRoot(context.Context, *GetValidatorRootRequest) (*GetValidatorRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorRoot not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetEpochInformation(context.Context, *EpochInformationRequest) (*EpochInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochInformation not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetForkData(context.Context, *empty.Empty) (*ForkData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForkData not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetProposerForSlot(context.Context, *GetProposerForSlotRequest) (*GetProposerForSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposerForSlot not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBlockchainRPCServer) SubmitAttestation(context.Context, *Attestation) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAttestation not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetMempool(context.Context, *MempoolRequest) (*BlockBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempool not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetValidatorInformation(context.Context, *GetValidatorRequest) (*Validator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorInformation not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetListeningAddresses(context.Context, *empty.Empty) (*ListeningAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningAddresses not implemented")
}
func (*UnimplementedBlockchainRPCServer) Connect(context.Context, *ConnectMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedBlockchainRPCServer) CrosslinkStream(*CrosslinkStreamRequest, BlockchainRPC_CrosslinkStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CrosslinkStream not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetGenesisTime(context.Context, *empty.Empty) (*GenesisTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisTime not implemented")
}
func (*UnimplementedBlockchainRPCServer) GetValidatorProof(context.Context, *GetValidatorProofRequest) (*GetValidatorProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorProof not implemented")
}

func RegisterBlockchainRPCServer(s *grpc.Server, srv BlockchainRPCServer) {
	s.RegisterService(&_BlockchainRPC_serviceDesc, srv)
}

func _BlockchainRPC_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetSlotNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetSlotNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetSlotNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetSlotNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetBlockHash(ctx, req.(*GetBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetLastBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetLastBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetLastBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetLastBlockHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetStateRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetStateRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetStateRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetStateRoot(ctx, req.(*GetStateRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetValidatorRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetValidatorRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetValidatorRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetValidatorRoot(ctx, req.(*GetValidatorRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetEpochInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetEpochInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetEpochInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetEpochInformation(ctx, req.(*EpochInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetForkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetForkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetForkData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetForkData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetProposerForSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposerForSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetProposerForSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetProposerForSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetProposerForSlot(ctx, req.(*GetProposerForSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_SubmitAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attestation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).SubmitAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/SubmitAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).SubmitAttestation(ctx, req.(*Attestation))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MempoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetMempool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetMempool(ctx, req.(*MempoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetValidatorInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetValidatorInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetValidatorInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetValidatorInformation(ctx, req.(*GetValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetListeningAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetListeningAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetListeningAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetListeningAddresses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).Connect(ctx, req.(*ConnectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_CrosslinkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrosslinkStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainRPCServer).CrosslinkStream(m, &blockchainRPCCrosslinkStreamServer{stream})
}

type BlockchainRPC_CrosslinkStreamServer interface {
	Send(*CrosslinkMessage) error
	grpc.ServerStream
}

type blockchainRPCCrosslinkStreamServer struct {
	grpc.ServerStream
}

func (x *blockchainRPCCrosslinkStreamServer) Send(m *CrosslinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockchainRPC_GetGenesisTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetGenesisTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetGenesisTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetGenesisTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainRPC_GetValidatorProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainRPCServer).GetValidatorProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockchainRPC/GetValidatorProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainRPCServer).GetValidatorProof(ctx, req.(*GetValidatorProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockchainRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BlockchainRPC",
	HandlerType: (*BlockchainRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _BlockchainRPC_SubmitBlock_Handler,
		},
		{
			MethodName: "GetSlotNumber",
			Handler:    _BlockchainRPC_GetSlotNumber_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _BlockchainRPC_GetBlockHash_Handler,
		},
		{
			MethodName: "GetLastBlockHash",
			Handler:    _BlockchainRPC_GetLastBlockHash_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _BlockchainRPC_GetState_Handler,
		},
		{
			MethodName: "GetStateRoot",
			Handler:    _BlockchainRPC_GetStateRoot_Handler,
		},
		{
			MethodName: "GetValidatorRoot",
			Handler:    _BlockchainRPC_GetValidatorRoot_Handler,
		},
		{
			MethodName: "GetEpochInformation",
			Handler:    _BlockchainRPC_GetEpochInformation_Handler,
		},
		{
			MethodName: "GetForkData",
			Handler:    _BlockchainRPC_GetForkData_Handler,
		},
		{
			MethodName: "GetProposerForSlot",
			Handler:    _BlockchainRPC_GetProposerForSlot_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockchainRPC_GetBlock_Handler,
		},
		{
			MethodName: "SubmitAttestation",
			Handler:    _BlockchainRPC_SubmitAttestation_Handler,
		},
		{
			MethodName: "GetMempool",
			Handler:    _BlockchainRPC_GetMempool_Handler,
		},
		{
			MethodName: "GetValidatorInformation",
			Handler:    _BlockchainRPC_GetValidatorInformation_Handler,
		},
		{
			MethodName: "GetListeningAddresses",
			Handler:    _BlockchainRPC_GetListeningAddresses_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _BlockchainRPC_Connect_Handler,
		},
		{
			MethodName: "GetGenesisTime",
			Handler:    _BlockchainRPC_GetGenesisTime_Handler,
		},
		{
			MethodName: "GetValidatorProof",
			Handler:    _BlockchainRPC_GetValidatorProof_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CrosslinkStream",
			Handler:       _BlockchainRPC_CrosslinkStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beaconrpc.proto",
}
