syntax = "proto3";

package pb;

service BlockchainRPC {
    rpc SubmitBlock(SubmitBlockRequest) returns (SubmitBlockResponse);

    rpc GetSlotNumber(Empty) returns (SlotNumberResponse);

    rpc GetBlockHash(GetBlockHashRequest) returns (GetBlockHashResponse);

    rpc GetSlotAndShardAssignment(GetSlotAndShardAssignmentRequest) returns (SlotAndShardAssignment);

    rpc GetValidatorAtIndex(GetValidatorAtIndexRequest) returns (GetValidatorAtIndexResponse);

    rpc GetCommitteeValidators(GetCommitteeValidatorsRequest) returns (GetCommitteeValidatorsResponse);
}

enum Role {
    ATTESTER = 0;
    PROPOSER = 1;
}

message Empty {}

message GetSlotAndShardAssignmentRequest {
    uint32 ValidatorID = 1;
}

message SlotAndShardAssignment {
    uint32 ShardID = 1;
    uint64 Slot = 2;
    Role Role = 3;
}

message SubmitBlockRequest {
    Block Block = 1;
}

message SubmitBlockResponse {
    bytes BlockHash = 1;
}

message SlotNumberResponse {
    uint64 SlotNumber = 1;
}

message GetBlockHashRequest {
    uint64 SlotNumber = 1;
}

message GetBlockHashResponse {
    bytes Hash = 1;
}

message GetValidatorAtIndexRequest {
    uint32 Index = 1;
}

message GetValidatorAtIndexResponse {
    uint32 PublicKey = 1; // placeholder, will use bls.PublicKey after it's determined.
    uint32 Status = 2;
}

message GetCommitteeValidatorsRequest {
    uint64 SlotNumber = 1;
    uint32 Shard = 2;
}

message GetCommitteeValidatorsResponse {
    repeated GetValidatorAtIndexResponse Validators = 1;
}

message Block {
    uint64 SlotNumber = 1;
    bytes RandaoReveal = 2;
    repeated bytes AncestorHashes = 3;
    bytes ActiveStateRoot = 4;
    bytes CrystallizedStateRoot = 5;
    repeated Attestation Attestations = 6;
    repeated Special Specials = 7;
}

message Special {
    uint32 Type = 1;
    repeated bytes Data = 2;
}

message Attestation {
    uint64 Slot = 1;
    uint32 ShardID = 2;
    uint64 JustifiedSlot = 3;
    bytes JustifiedBlockHash = 4;
    bytes ShardBlockHash = 5;
    repeated bytes ObliqueParentHashes = 6;
    bytes AttesterBitField = 7;
    bytes AggregateSignature = 8;
}

message AttestationSignedData {
    uint32 Version = 1;
    uint64 Slot = 2;
    uint32 Shard = 3;
    repeated bytes ParentHashes = 4;
    bytes ShardBlockHash = 5;
    uint64 JustifiedSlot = 6;
}