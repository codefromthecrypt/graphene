// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: relayerrpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayerRPCClient is the client API for RelayerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayerRPCClient interface {
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetListeningAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error)
	Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStateKey(ctx context.Context, in *GetStateKeyRequest, opts ...grpc.CallOption) (*StateKey, error)
	GetStateKeys(ctx context.Context, in *GetStateKeysRequest, opts ...grpc.CallOption) (*StateKeys, error)
}

type relayerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayerRPCClient(cc grpc.ClientConnInterface) RelayerRPCClient {
	return &relayerRPCClient{cc}
}

func (c *relayerRPCClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetListeningAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error) {
	out := new(ListeningAddressesResponse)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetListeningAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetStateKey(ctx context.Context, in *GetStateKeyRequest, opts ...grpc.CallOption) (*StateKey, error) {
	out := new(StateKey)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetStateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetStateKeys(ctx context.Context, in *GetStateKeysRequest, opts ...grpc.CallOption) (*StateKeys, error) {
	out := new(StateKeys)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetStateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerRPCServer is the server API for RelayerRPC service.
// All implementations must embed UnimplementedRelayerRPCServer
// for forward compatibility
type RelayerRPCServer interface {
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*emptypb.Empty, error)
	GetListeningAddresses(context.Context, *emptypb.Empty) (*ListeningAddressesResponse, error)
	Connect(context.Context, *ConnectMessage) (*emptypb.Empty, error)
	GetStateKey(context.Context, *GetStateKeyRequest) (*StateKey, error)
	GetStateKeys(context.Context, *GetStateKeysRequest) (*StateKeys, error)
	mustEmbedUnimplementedRelayerRPCServer()
}

// UnimplementedRelayerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRelayerRPCServer struct {
}

func (UnimplementedRelayerRPCServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedRelayerRPCServer) GetListeningAddresses(context.Context, *emptypb.Empty) (*ListeningAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningAddresses not implemented")
}
func (UnimplementedRelayerRPCServer) Connect(context.Context, *ConnectMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedRelayerRPCServer) GetStateKey(context.Context, *GetStateKeyRequest) (*StateKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateKey not implemented")
}
func (UnimplementedRelayerRPCServer) GetStateKeys(context.Context, *GetStateKeysRequest) (*StateKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateKeys not implemented")
}
func (UnimplementedRelayerRPCServer) mustEmbedUnimplementedRelayerRPCServer() {}

// UnsafeRelayerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayerRPCServer will
// result in compilation errors.
type UnsafeRelayerRPCServer interface {
	mustEmbedUnimplementedRelayerRPCServer()
}

func RegisterRelayerRPCServer(s grpc.ServiceRegistrar, srv RelayerRPCServer) {
	s.RegisterService(&RelayerRPC_ServiceDesc, srv)
}

func _RelayerRPC_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetListeningAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetListeningAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetListeningAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetListeningAddresses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).Connect(ctx, req.(*ConnectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetStateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetStateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetStateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetStateKey(ctx, req.(*GetStateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetStateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetStateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetStateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetStateKeys(ctx, req.(*GetStateKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayerRPC_ServiceDesc is the grpc.ServiceDesc for RelayerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RelayerRPC",
	HandlerType: (*RelayerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _RelayerRPC_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetListeningAddresses",
			Handler:    _RelayerRPC_GetListeningAddresses_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _RelayerRPC_Connect_Handler,
		},
		{
			MethodName: "GetStateKey",
			Handler:    _RelayerRPC_GetStateKey_Handler,
		},
		{
			MethodName: "GetStateKeys",
			Handler:    _RelayerRPC_GetStateKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayerrpc.proto",
}
