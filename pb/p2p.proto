// This is for P2P
syntax = "proto3";

package pb;

import "google/protobuf/empty.proto";

message VersionMessage {
    uint32 version = 1;
    bytes id = 2;
    string address = 3;
}

message VerackMessage {
}

message PingMessage {
    uint64 nonce = 1;
}

message PongMessage {
    uint64 nonce = 1;
}

message RejectMessage {
    string message = 1;
}

message GetBlockMessage {
    repeated bytes locatorHahes = 1; //block locator object; newest back to genesis block (dense to start, but then sparse)
    bytes hashStop = 2; //hash of the last desired block header; set to zero to get as many blocks as possible (2000)
}

// Response to GetBlockMessage
message BlockMessage {
    bytes hash = 1;
}

service P2PRPC {
    rpc GetConnectionStatus(google.protobuf.Empty) returns (ConnectionStatus);

    rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse);

    rpc Subscribe(SubscriptionRequest) returns (Subscription);

    rpc ListenForMessages(Subscription) returns (stream Message);

    rpc Unsubscribe(Subscription) returns (google.protobuf.Empty);

    rpc Connect(Peers) returns (ConnectResponse);

    rpc GetSettings(google.protobuf.Empty) returns (P2PSettings);

    rpc Broadcast(MessageAndTopic) returns (google.protobuf.Empty);
}

message SubscriptionRequest {
    string Topic = 1;
}

message Subscription {
    uint64 ID = 1;
}

message MessageAndTopic {
    bytes Data = 1;
    string Topic = 2;
}

message Peer {
    string Address = 1;
}

message GetPeersResponse {
    repeated Peer Peers = 1;
}

message Message {
    bytes Data = 1;
}

message Peers {
    repeated Peer Peers = 1;
}

message P2PSettings {
}

message ConnectionStatus {
    bool Connected = 1;
}

message ConnectResponse {
    bool Success = 1;
}

