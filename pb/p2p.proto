// This is for P2P
syntax = "proto3";

package pb;

import "google/protobuf/empty.proto";

message VersionMessage {
    uint32 Version = 1;
    string ID = 2;
    string Address = 3;
}

message VerackMessage {
}

message PingMessage {
    uint64 Nonce = 1;
}

message PongMessage {
    uint64 Nonce = 1;
}

message RejectMessage {
    string Message = 1;
}

message GetBlockMessage {
    repeated bytes LocatorHahes = 1; //block locator object; newest back to genesis block (dense to start, but then sparse)
    bytes HashStop = 2; //hash of the last desired block header; set to zero to get as many blocks as possible (2000)
}

// Response to GetBlockMessage
message BlockMessage {
    bytes Hash = 1;
}

service P2PRPC {
    rpc GetConnectionStatus(google.protobuf.Empty) returns (ConnectionStatus);

    rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse);

    rpc Subscribe(SubscriptionRequest) returns (Subscription);

    rpc ListenForMessages(Subscription) returns (stream Message);

    rpc Unsubscribe(Subscription) returns (google.protobuf.Empty);

    rpc Connect(Peers) returns (ConnectResponse);

    rpc GetSettings(google.protobuf.Empty) returns (P2PSettings);

    rpc Broadcast(MessageAndTopic) returns (google.protobuf.Empty);

    rpc SendDirectMessage(SendDirectMessageRequest) returns (google.protobuf.Empty);
    rpc SubscribeDirectMessage(SubscribeDirectMessageRequest) returns (DirectMessageSubscription);
    rpc UnsubscribeDirectMessage(DirectMessageSubscription) returns (google.protobuf.Empty);
    rpc ListenForDirectMessages(DirectMessageSubscription) returns (stream ListenForDirectMessagesResponse);
}

message SendDirectMessageRequest {
    string PeerID = 1;
    bytes Message = 2;
}

message SubscribeDirectMessageRequest {
    string PeerID = 1;  // If PeerID == "", listen to all peers, otherwise, only listen to specified peer
    string MessageName = 2;
}

message DirectMessageSubscription {
    uint64 ID = 1;
    string MessageName = 2;
}

message ListenForDirectMessagesResponse {
    string PeerID = 1;
    bytes Data = 2;
}

message SubscriptionRequest {
    string Topic = 1;
}

message Subscription {
    uint64 ID = 1;
}

message MessageAndTopic {
    bytes Data = 1;
    string Topic = 2;
}

message Peer {
    string PeerID = 1;
    string Address = 2;
}

message GetPeersResponse {
    repeated Peer Peers = 1;
}

message Message {
    bytes Data = 1;
}

message Peers {
    repeated Peer Peers = 1;
}

message P2PSettings {
}

message ConnectionStatus {
    bool Connected = 1;
}

message ConnectResponse {
    bool Success = 1;
}

