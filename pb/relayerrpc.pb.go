// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.2
// source: relayerrpc.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetStateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID uint64 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Key     []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetStateKeyRequest) Reset() {
	*x = GetStateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayerrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateKeyRequest) ProtoMessage() {}

func (x *GetStateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateKeyRequest.ProtoReflect.Descriptor instead.
func (*GetStateKeyRequest) Descriptor() ([]byte, []int) {
	return file_relayerrpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetStateKeyRequest) GetShardID() uint64 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *GetStateKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type GetStateKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardID uint64   `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Key     [][]byte `protobuf:"bytes,2,rep,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetStateKeysRequest) Reset() {
	*x = GetStateKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayerrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateKeysRequest) ProtoMessage() {}

func (x *GetStateKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateKeysRequest.ProtoReflect.Descriptor instead.
func (*GetStateKeysRequest) Descriptor() ([]byte, []int) {
	return file_relayerrpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetStateKeysRequest) GetShardID() uint64 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *GetStateKeysRequest) GetKey() [][]byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type StateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *StateKey) Reset() {
	*x = StateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayerrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKey) ProtoMessage() {}

func (x *StateKey) ProtoReflect() protoreflect.Message {
	mi := &file_relayerrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateKey.ProtoReflect.Descriptor instead.
func (*StateKey) Descriptor() ([]byte, []int) {
	return file_relayerrpc_proto_rawDescGZIP(), []int{2}
}

func (x *StateKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type StateKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values [][]byte `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *StateKeys) Reset() {
	*x = StateKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayerrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateKeys) ProtoMessage() {}

func (x *StateKeys) ProtoReflect() protoreflect.Message {
	mi := &file_relayerrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateKeys.ProtoReflect.Descriptor instead.
func (*StateKeys) Descriptor() ([]byte, []int) {
	return file_relayerrpc_proto_rawDescGZIP(), []int{3}
}

func (x *StateKeys) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ShardTransaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
	ShardID     uint64            `protobuf:"varint,2,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayerrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_relayerrpc_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitTransactionRequest) GetTransaction() *ShardTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SubmitTransactionRequest) GetShardID() uint64 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

var File_relayerrpc_proto protoreflect.FileDescriptor

var file_relayerrpc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6c, 0x0a,
	0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x32, 0xcc, 0x02, 0x0a, 0x0a,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x50, 0x43, 0x12, 0x49, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_relayerrpc_proto_rawDescOnce sync.Once
	file_relayerrpc_proto_rawDescData = file_relayerrpc_proto_rawDesc
)

func file_relayerrpc_proto_rawDescGZIP() []byte {
	file_relayerrpc_proto_rawDescOnce.Do(func() {
		file_relayerrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_relayerrpc_proto_rawDescData)
	})
	return file_relayerrpc_proto_rawDescData
}

var file_relayerrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_relayerrpc_proto_goTypes = []interface{}{
	(*GetStateKeyRequest)(nil),         // 0: pb.GetStateKeyRequest
	(*GetStateKeysRequest)(nil),        // 1: pb.GetStateKeysRequest
	(*StateKey)(nil),                   // 2: pb.StateKey
	(*StateKeys)(nil),                  // 3: pb.StateKeys
	(*SubmitTransactionRequest)(nil),   // 4: pb.SubmitTransactionRequest
	(*ShardTransaction)(nil),           // 5: pb.ShardTransaction
	(*empty.Empty)(nil),                // 6: google.protobuf.Empty
	(*ConnectMessage)(nil),             // 7: pb.ConnectMessage
	(*ListeningAddressesResponse)(nil), // 8: pb.ListeningAddressesResponse
}
var file_relayerrpc_proto_depIdxs = []int32{
	5, // 0: pb.SubmitTransactionRequest.Transaction:type_name -> pb.ShardTransaction
	4, // 1: pb.RelayerRPC.SubmitTransaction:input_type -> pb.SubmitTransactionRequest
	6, // 2: pb.RelayerRPC.GetListeningAddresses:input_type -> google.protobuf.Empty
	7, // 3: pb.RelayerRPC.Connect:input_type -> pb.ConnectMessage
	0, // 4: pb.RelayerRPC.GetStateKey:input_type -> pb.GetStateKeyRequest
	1, // 5: pb.RelayerRPC.GetStateKeys:input_type -> pb.GetStateKeysRequest
	6, // 6: pb.RelayerRPC.SubmitTransaction:output_type -> google.protobuf.Empty
	8, // 7: pb.RelayerRPC.GetListeningAddresses:output_type -> pb.ListeningAddressesResponse
	6, // 8: pb.RelayerRPC.Connect:output_type -> google.protobuf.Empty
	2, // 9: pb.RelayerRPC.GetStateKey:output_type -> pb.StateKey
	3, // 10: pb.RelayerRPC.GetStateKeys:output_type -> pb.StateKeys
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_relayerrpc_proto_init() }
func file_relayerrpc_proto_init() {
	if File_relayerrpc_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_relayerrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayerrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayerrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayerrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayerrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relayerrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relayerrpc_proto_goTypes,
		DependencyIndexes: file_relayerrpc_proto_depIdxs,
		MessageInfos:      file_relayerrpc_proto_msgTypes,
	}.Build()
	File_relayerrpc_proto = out.File
	file_relayerrpc_proto_rawDesc = nil
	file_relayerrpc_proto_goTypes = nil
	file_relayerrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RelayerRPCClient is the client API for RelayerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayerRPCClient interface {
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetListeningAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error)
	Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStateKey(ctx context.Context, in *GetStateKeyRequest, opts ...grpc.CallOption) (*StateKey, error)
	GetStateKeys(ctx context.Context, in *GetStateKeysRequest, opts ...grpc.CallOption) (*StateKeys, error)
}

type relayerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayerRPCClient(cc grpc.ClientConnInterface) RelayerRPCClient {
	return &relayerRPCClient{cc}
}

func (c *relayerRPCClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetListeningAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error) {
	out := new(ListeningAddressesResponse)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetListeningAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetStateKey(ctx context.Context, in *GetStateKeyRequest, opts ...grpc.CallOption) (*StateKey, error) {
	out := new(StateKey)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetStateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetStateKeys(ctx context.Context, in *GetStateKeysRequest, opts ...grpc.CallOption) (*StateKeys, error) {
	out := new(StateKeys)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetStateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerRPCServer is the server API for RelayerRPC service.
type RelayerRPCServer interface {
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*empty.Empty, error)
	GetListeningAddresses(context.Context, *empty.Empty) (*ListeningAddressesResponse, error)
	Connect(context.Context, *ConnectMessage) (*empty.Empty, error)
	GetStateKey(context.Context, *GetStateKeyRequest) (*StateKey, error)
	GetStateKeys(context.Context, *GetStateKeysRequest) (*StateKeys, error)
}

// UnimplementedRelayerRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRelayerRPCServer struct {
}

func (*UnimplementedRelayerRPCServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedRelayerRPCServer) GetListeningAddresses(context.Context, *empty.Empty) (*ListeningAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningAddresses not implemented")
}
func (*UnimplementedRelayerRPCServer) Connect(context.Context, *ConnectMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedRelayerRPCServer) GetStateKey(context.Context, *GetStateKeyRequest) (*StateKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateKey not implemented")
}
func (*UnimplementedRelayerRPCServer) GetStateKeys(context.Context, *GetStateKeysRequest) (*StateKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateKeys not implemented")
}

func RegisterRelayerRPCServer(s *grpc.Server, srv RelayerRPCServer) {
	s.RegisterService(&_RelayerRPC_serviceDesc, srv)
}

func _RelayerRPC_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetListeningAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetListeningAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetListeningAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetListeningAddresses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).Connect(ctx, req.(*ConnectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetStateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetStateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetStateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetStateKey(ctx, req.(*GetStateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetStateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetStateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetStateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetStateKeys(ctx, req.(*GetStateKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelayerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RelayerRPC",
	HandlerType: (*RelayerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _RelayerRPC_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetListeningAddresses",
			Handler:    _RelayerRPC_GetListeningAddresses_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _RelayerRPC_Connect_Handler,
		},
		{
			MethodName: "GetStateKey",
			Handler:    _RelayerRPC_GetStateKey_Handler,
		},
		{
			MethodName: "GetStateKeys",
			Handler:    _RelayerRPC_GetStateKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayerrpc.proto",
}
