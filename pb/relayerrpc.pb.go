// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relayerrpc.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubmitTransactionRequest struct {
	Transaction          *ShardTransaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
	ShardID              uint64            `protobuf:"varint,2,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubmitTransactionRequest) Reset()         { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()    {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_relayerrpc_127742e05b6caa87, []int{0}
}
func (m *SubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionRequest.Unmarshal(m, b)
}
func (m *SubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionRequest.Marshal(b, m, deterministic)
}
func (dst *SubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionRequest.Merge(dst, src)
}
func (m *SubmitTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionRequest.Size(m)
}
func (m *SubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionRequest proto.InternalMessageInfo

func (m *SubmitTransactionRequest) GetTransaction() *ShardTransaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SubmitTransactionRequest) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func init() {
	proto.RegisterType((*SubmitTransactionRequest)(nil), "pb.SubmitTransactionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RelayerRPCClient is the client API for RelayerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayerRPCClient interface {
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetListeningAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error)
	Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type relayerRPCClient struct {
	cc *grpc.ClientConn
}

func NewRelayerRPCClient(cc *grpc.ClientConn) RelayerRPCClient {
	return &relayerRPCClient{cc}
}

func (c *relayerRPCClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) GetListeningAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListeningAddressesResponse, error) {
	out := new(ListeningAddressesResponse)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/GetListeningAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerRPCClient) Connect(ctx context.Context, in *ConnectMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.RelayerRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerRPCServer is the server API for RelayerRPC service.
type RelayerRPCServer interface {
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*empty.Empty, error)
	GetListeningAddresses(context.Context, *empty.Empty) (*ListeningAddressesResponse, error)
	Connect(context.Context, *ConnectMessage) (*empty.Empty, error)
}

func RegisterRelayerRPCServer(s *grpc.Server, srv RelayerRPCServer) {
	s.RegisterService(&_RelayerRPC_serviceDesc, srv)
}

func _RelayerRPC_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_GetListeningAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).GetListeningAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/GetListeningAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).GetListeningAddresses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RelayerRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerRPCServer).Connect(ctx, req.(*ConnectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelayerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RelayerRPC",
	HandlerType: (*RelayerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _RelayerRPC_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetListeningAddresses",
			Handler:    _RelayerRPC_GetListeningAddresses_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _RelayerRPC_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayerrpc.proto",
}

func init() { proto.RegisterFile("relayerrpc.proto", fileDescriptor_relayerrpc_127742e05b6caa87) }

var fileDescriptor_relayerrpc_127742e05b6caa87 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x11, 0x0b, 0x53, 0x0f, 0x3a, 0xa8, 0x84, 0x28, 0x52, 0x3c, 0xf5, 0xb4, 0x85,
	0x8a, 0xde, 0xa5, 0x8a, 0x14, 0x14, 0x25, 0xf5, 0x05, 0x76, 0x93, 0x31, 0x06, 0x92, 0x9d, 0x75,
	0x67, 0x73, 0xe8, 0xd3, 0xfa, 0x2a, 0x92, 0xc4, 0x42, 0xa0, 0xe4, 0xf8, 0x0d, 0xdf, 0xf0, 0xff,
	0x3f, 0x9c, 0x7a, 0xaa, 0xf4, 0x8e, 0xbc, 0x77, 0x99, 0x72, 0x9e, 0x03, 0xe3, 0xc4, 0x99, 0xe4,
	0xaa, 0x60, 0x2e, 0x2a, 0x5a, 0x76, 0x17, 0xd3, 0x7c, 0x2d, 0xa9, 0x76, 0x61, 0xd7, 0x0b, 0xc9,
	0x49, 0xc6, 0x75, 0xcd, 0xb6, 0xa7, 0xdb, 0x0a, 0xe2, 0x6d, 0x63, 0xea, 0x32, 0x7c, 0x7a, 0x6d,
	0x45, 0x67, 0xa1, 0x64, 0x9b, 0xd2, 0x4f, 0x43, 0x12, 0xf0, 0x01, 0x66, 0x83, 0x6b, 0x1c, 0xcd,
	0xa3, 0xc5, 0x6c, 0x75, 0xae, 0x9c, 0x51, 0xdb, 0x6f, 0xed, 0xf3, 0xe1, 0xc7, 0x50, 0xc4, 0x18,
	0xa6, 0x9d, 0xb0, 0x79, 0x8a, 0x27, 0xf3, 0x68, 0x71, 0x94, 0xee, 0x71, 0xf5, 0x1b, 0x01, 0xa4,
	0x7d, 0xe3, 0xf4, 0x63, 0x8d, 0x1b, 0x38, 0x3b, 0x08, 0xc7, 0xeb, 0x2e, 0x60, 0xa4, 0x53, 0x72,
	0xa9, 0xfa, 0x6d, 0x6a, 0xbf, 0x4d, 0x3d, 0xb7, 0xdb, 0xf0, 0x1d, 0x2e, 0x5e, 0x28, 0xbc, 0x96,
	0x12, 0xc8, 0x96, 0xb6, 0x78, 0xcc, 0x73, 0x4f, 0x22, 0x24, 0x38, 0xf2, 0x90, 0xdc, 0xb4, 0x31,
	0x87, 0x7e, 0x4a, 0xe2, 0xd8, 0x0a, 0xe1, 0x3d, 0x4c, 0xd7, 0x6c, 0x2d, 0x65, 0x01, 0xb1, 0x55,
	0xff, 0xe1, 0x8d, 0x44, 0x74, 0x41, 0x63, 0x3d, 0xcc, 0x71, 0xc7, 0x77, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0x4c, 0x23, 0x55, 0x99, 0x01, 0x00, 0x00,
}
