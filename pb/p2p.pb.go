// Code generated by protoc-gen-go. DO NOT EDIT.
// source: p2p.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionMessage struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionMessage) Reset()         { *m = VersionMessage{} }
func (m *VersionMessage) String() string { return proto.CompactTextString(m) }
func (*VersionMessage) ProtoMessage()    {}
func (*VersionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{0}
}

func (m *VersionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionMessage.Unmarshal(m, b)
}
func (m *VersionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionMessage.Marshal(b, m, deterministic)
}
func (m *VersionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionMessage.Merge(m, src)
}
func (m *VersionMessage) XXX_Size() int {
	return xxx_messageInfo_VersionMessage.Size(m)
}
func (m *VersionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VersionMessage proto.InternalMessageInfo

func (m *VersionMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VersionMessage) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *VersionMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type VerackMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerackMessage) Reset()         { *m = VerackMessage{} }
func (m *VerackMessage) String() string { return proto.CompactTextString(m) }
func (*VerackMessage) ProtoMessage()    {}
func (*VerackMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{1}
}

func (m *VerackMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerackMessage.Unmarshal(m, b)
}
func (m *VerackMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerackMessage.Marshal(b, m, deterministic)
}
func (m *VerackMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerackMessage.Merge(m, src)
}
func (m *VerackMessage) XXX_Size() int {
	return xxx_messageInfo_VerackMessage.Size(m)
}
func (m *VerackMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VerackMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VerackMessage proto.InternalMessageInfo

type PingMessage struct {
	Nonce                uint64   `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingMessage) Reset()         { *m = PingMessage{} }
func (m *PingMessage) String() string { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()    {}
func (*PingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{2}
}

func (m *PingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingMessage.Unmarshal(m, b)
}
func (m *PingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingMessage.Marshal(b, m, deterministic)
}
func (m *PingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingMessage.Merge(m, src)
}
func (m *PingMessage) XXX_Size() int {
	return xxx_messageInfo_PingMessage.Size(m)
}
func (m *PingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PingMessage proto.InternalMessageInfo

func (m *PingMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type PongMessage struct {
	Nonce                uint64   `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PongMessage) Reset()         { *m = PongMessage{} }
func (m *PongMessage) String() string { return proto.CompactTextString(m) }
func (*PongMessage) ProtoMessage()    {}
func (*PongMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{3}
}

func (m *PongMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PongMessage.Unmarshal(m, b)
}
func (m *PongMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PongMessage.Marshal(b, m, deterministic)
}
func (m *PongMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongMessage.Merge(m, src)
}
func (m *PongMessage) XXX_Size() int {
	return xxx_messageInfo_PongMessage.Size(m)
}
func (m *PongMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PongMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PongMessage proto.InternalMessageInfo

func (m *PongMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type RejectMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectMessage) Reset()         { *m = RejectMessage{} }
func (m *RejectMessage) String() string { return proto.CompactTextString(m) }
func (*RejectMessage) ProtoMessage()    {}
func (*RejectMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{4}
}

func (m *RejectMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RejectMessage.Unmarshal(m, b)
}
func (m *RejectMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RejectMessage.Marshal(b, m, deterministic)
}
func (m *RejectMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectMessage.Merge(m, src)
}
func (m *RejectMessage) XXX_Size() int {
	return xxx_messageInfo_RejectMessage.Size(m)
}
func (m *RejectMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RejectMessage proto.InternalMessageInfo

func (m *RejectMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetBlockMessage struct {
	LocatorHahes         [][]byte `protobuf:"bytes,1,rep,name=LocatorHahes,proto3" json:"LocatorHahes,omitempty"`
	HashStop             []byte   `protobuf:"bytes,2,opt,name=HashStop,proto3" json:"HashStop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockMessage) Reset()         { *m = GetBlockMessage{} }
func (m *GetBlockMessage) String() string { return proto.CompactTextString(m) }
func (*GetBlockMessage) ProtoMessage()    {}
func (*GetBlockMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{5}
}

func (m *GetBlockMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockMessage.Unmarshal(m, b)
}
func (m *GetBlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockMessage.Marshal(b, m, deterministic)
}
func (m *GetBlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockMessage.Merge(m, src)
}
func (m *GetBlockMessage) XXX_Size() int {
	return xxx_messageInfo_GetBlockMessage.Size(m)
}
func (m *GetBlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockMessage proto.InternalMessageInfo

func (m *GetBlockMessage) GetLocatorHahes() [][]byte {
	if m != nil {
		return m.LocatorHahes
	}
	return nil
}

func (m *GetBlockMessage) GetHashStop() []byte {
	if m != nil {
		return m.HashStop
	}
	return nil
}

// Response to GetBlockMessage
type BlockMessage struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockMessage) Reset()         { *m = BlockMessage{} }
func (m *BlockMessage) String() string { return proto.CompactTextString(m) }
func (*BlockMessage) ProtoMessage()    {}
func (*BlockMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{6}
}

func (m *BlockMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockMessage.Unmarshal(m, b)
}
func (m *BlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockMessage.Marshal(b, m, deterministic)
}
func (m *BlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMessage.Merge(m, src)
}
func (m *BlockMessage) XXX_Size() int {
	return xxx_messageInfo_BlockMessage.Size(m)
}
func (m *BlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMessage proto.InternalMessageInfo

func (m *BlockMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type SendDirectMessageRequest struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendDirectMessageRequest) Reset()         { *m = SendDirectMessageRequest{} }
func (m *SendDirectMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendDirectMessageRequest) ProtoMessage()    {}
func (*SendDirectMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{7}
}

func (m *SendDirectMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendDirectMessageRequest.Unmarshal(m, b)
}
func (m *SendDirectMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendDirectMessageRequest.Marshal(b, m, deterministic)
}
func (m *SendDirectMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendDirectMessageRequest.Merge(m, src)
}
func (m *SendDirectMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SendDirectMessageRequest.Size(m)
}
func (m *SendDirectMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendDirectMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendDirectMessageRequest proto.InternalMessageInfo

func (m *SendDirectMessageRequest) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *SendDirectMessageRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type SubscribeDirectMessageRequest struct {
	MessageName          string   `protobuf:"bytes,1,opt,name=MessageName,proto3" json:"MessageName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeDirectMessageRequest) Reset()         { *m = SubscribeDirectMessageRequest{} }
func (m *SubscribeDirectMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeDirectMessageRequest) ProtoMessage()    {}
func (*SubscribeDirectMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{8}
}

func (m *SubscribeDirectMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeDirectMessageRequest.Unmarshal(m, b)
}
func (m *SubscribeDirectMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeDirectMessageRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeDirectMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeDirectMessageRequest.Merge(m, src)
}
func (m *SubscribeDirectMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeDirectMessageRequest.Size(m)
}
func (m *SubscribeDirectMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeDirectMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeDirectMessageRequest proto.InternalMessageInfo

func (m *SubscribeDirectMessageRequest) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

type DirectMessageSubscription struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MessageName          string   `protobuf:"bytes,2,opt,name=MessageName,proto3" json:"MessageName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectMessageSubscription) Reset()         { *m = DirectMessageSubscription{} }
func (m *DirectMessageSubscription) String() string { return proto.CompactTextString(m) }
func (*DirectMessageSubscription) ProtoMessage()    {}
func (*DirectMessageSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{9}
}

func (m *DirectMessageSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectMessageSubscription.Unmarshal(m, b)
}
func (m *DirectMessageSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectMessageSubscription.Marshal(b, m, deterministic)
}
func (m *DirectMessageSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectMessageSubscription.Merge(m, src)
}
func (m *DirectMessageSubscription) XXX_Size() int {
	return xxx_messageInfo_DirectMessageSubscription.Size(m)
}
func (m *DirectMessageSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectMessageSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_DirectMessageSubscription proto.InternalMessageInfo

func (m *DirectMessageSubscription) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DirectMessageSubscription) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

type ListenForDirectMessagesResponse struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenForDirectMessagesResponse) Reset()         { *m = ListenForDirectMessagesResponse{} }
func (m *ListenForDirectMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*ListenForDirectMessagesResponse) ProtoMessage()    {}
func (*ListenForDirectMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{10}
}

func (m *ListenForDirectMessagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenForDirectMessagesResponse.Unmarshal(m, b)
}
func (m *ListenForDirectMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenForDirectMessagesResponse.Marshal(b, m, deterministic)
}
func (m *ListenForDirectMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenForDirectMessagesResponse.Merge(m, src)
}
func (m *ListenForDirectMessagesResponse) XXX_Size() int {
	return xxx_messageInfo_ListenForDirectMessagesResponse.Size(m)
}
func (m *ListenForDirectMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenForDirectMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListenForDirectMessagesResponse proto.InternalMessageInfo

func (m *ListenForDirectMessagesResponse) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *ListenForDirectMessagesResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscriptionRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionRequest) Reset()         { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()    {}
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{11}
}

func (m *SubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionRequest.Unmarshal(m, b)
}
func (m *SubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *SubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionRequest.Merge(m, src)
}
func (m *SubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_SubscriptionRequest.Size(m)
}
func (m *SubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionRequest proto.InternalMessageInfo

func (m *SubscriptionRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Subscription struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{12}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type MessageAndTopic struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageAndTopic) Reset()         { *m = MessageAndTopic{} }
func (m *MessageAndTopic) String() string { return proto.CompactTextString(m) }
func (*MessageAndTopic) ProtoMessage()    {}
func (*MessageAndTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{13}
}

func (m *MessageAndTopic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageAndTopic.Unmarshal(m, b)
}
func (m *MessageAndTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageAndTopic.Marshal(b, m, deterministic)
}
func (m *MessageAndTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAndTopic.Merge(m, src)
}
func (m *MessageAndTopic) XXX_Size() int {
	return xxx_messageInfo_MessageAndTopic.Size(m)
}
func (m *MessageAndTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAndTopic.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAndTopic proto.InternalMessageInfo

func (m *MessageAndTopic) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MessageAndTopic) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Peer struct {
	Address              string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{14}
}

func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetPeersResponse struct {
	Peers                []*Peer  `protobuf:"bytes,1,rep,name=Peers,proto3" json:"Peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPeersResponse) Reset()         { *m = GetPeersResponse{} }
func (m *GetPeersResponse) String() string { return proto.CompactTextString(m) }
func (*GetPeersResponse) ProtoMessage()    {}
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{15}
}

func (m *GetPeersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPeersResponse.Unmarshal(m, b)
}
func (m *GetPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPeersResponse.Marshal(b, m, deterministic)
}
func (m *GetPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPeersResponse.Merge(m, src)
}
func (m *GetPeersResponse) XXX_Size() int {
	return xxx_messageInfo_GetPeersResponse.Size(m)
}
func (m *GetPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPeersResponse proto.InternalMessageInfo

func (m *GetPeersResponse) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Message struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{16}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Peers struct {
	Peers                []*Peer  `protobuf:"bytes,1,rep,name=Peers,proto3" json:"Peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peers) Reset()         { *m = Peers{} }
func (m *Peers) String() string { return proto.CompactTextString(m) }
func (*Peers) ProtoMessage()    {}
func (*Peers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{17}
}

func (m *Peers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peers.Unmarshal(m, b)
}
func (m *Peers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peers.Marshal(b, m, deterministic)
}
func (m *Peers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peers.Merge(m, src)
}
func (m *Peers) XXX_Size() int {
	return xxx_messageInfo_Peers.Size(m)
}
func (m *Peers) XXX_DiscardUnknown() {
	xxx_messageInfo_Peers.DiscardUnknown(m)
}

var xxx_messageInfo_Peers proto.InternalMessageInfo

func (m *Peers) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type P2PSettings struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PSettings) Reset()         { *m = P2PSettings{} }
func (m *P2PSettings) String() string { return proto.CompactTextString(m) }
func (*P2PSettings) ProtoMessage()    {}
func (*P2PSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{18}
}

func (m *P2PSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PSettings.Unmarshal(m, b)
}
func (m *P2PSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PSettings.Marshal(b, m, deterministic)
}
func (m *P2PSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PSettings.Merge(m, src)
}
func (m *P2PSettings) XXX_Size() int {
	return xxx_messageInfo_P2PSettings.Size(m)
}
func (m *P2PSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PSettings.DiscardUnknown(m)
}

var xxx_messageInfo_P2PSettings proto.InternalMessageInfo

type ConnectionStatus struct {
	Connected            bool     `protobuf:"varint,1,opt,name=Connected,proto3" json:"Connected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionStatus) Reset()         { *m = ConnectionStatus{} }
func (m *ConnectionStatus) String() string { return proto.CompactTextString(m) }
func (*ConnectionStatus) ProtoMessage()    {}
func (*ConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{19}
}

func (m *ConnectionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionStatus.Unmarshal(m, b)
}
func (m *ConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionStatus.Marshal(b, m, deterministic)
}
func (m *ConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionStatus.Merge(m, src)
}
func (m *ConnectionStatus) XXX_Size() int {
	return xxx_messageInfo_ConnectionStatus.Size(m)
}
func (m *ConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionStatus proto.InternalMessageInfo

func (m *ConnectionStatus) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

type ConnectResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{20}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

func (m *ConnectResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*VersionMessage)(nil), "pb.VersionMessage")
	proto.RegisterType((*VerackMessage)(nil), "pb.VerackMessage")
	proto.RegisterType((*PingMessage)(nil), "pb.PingMessage")
	proto.RegisterType((*PongMessage)(nil), "pb.PongMessage")
	proto.RegisterType((*RejectMessage)(nil), "pb.RejectMessage")
	proto.RegisterType((*GetBlockMessage)(nil), "pb.GetBlockMessage")
	proto.RegisterType((*BlockMessage)(nil), "pb.BlockMessage")
	proto.RegisterType((*SendDirectMessageRequest)(nil), "pb.SendDirectMessageRequest")
	proto.RegisterType((*SubscribeDirectMessageRequest)(nil), "pb.SubscribeDirectMessageRequest")
	proto.RegisterType((*DirectMessageSubscription)(nil), "pb.DirectMessageSubscription")
	proto.RegisterType((*ListenForDirectMessagesResponse)(nil), "pb.ListenForDirectMessagesResponse")
	proto.RegisterType((*SubscriptionRequest)(nil), "pb.SubscriptionRequest")
	proto.RegisterType((*Subscription)(nil), "pb.Subscription")
	proto.RegisterType((*MessageAndTopic)(nil), "pb.MessageAndTopic")
	proto.RegisterType((*Peer)(nil), "pb.Peer")
	proto.RegisterType((*GetPeersResponse)(nil), "pb.GetPeersResponse")
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*Peers)(nil), "pb.Peers")
	proto.RegisterType((*P2PSettings)(nil), "pb.P2PSettings")
	proto.RegisterType((*ConnectionStatus)(nil), "pb.ConnectionStatus")
	proto.RegisterType((*ConnectResponse)(nil), "pb.ConnectResponse")
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor_e7fdddb109e6467a) }

var fileDescriptor_e7fdddb109e6467a = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x51, 0x4f, 0xdb, 0x3a,
	0x14, 0x56, 0x4a, 0x29, 0xed, 0x49, 0x4b, 0xc1, 0x45, 0x90, 0x9b, 0x0b, 0xdc, 0x5e, 0xf3, 0x30,
	0x10, 0x52, 0x41, 0xdd, 0xb4, 0x21, 0xed, 0x09, 0xe8, 0x56, 0x2a, 0x01, 0x0a, 0x2e, 0xe3, 0x61,
	0x2f, 0x53, 0x9a, 0x7a, 0x25, 0x1b, 0xc4, 0x59, 0xec, 0x3e, 0xec, 0x0f, 0xed, 0x77, 0x4e, 0x71,
	0xec, 0x24, 0xa5, 0x0d, 0x7d, 0xcb, 0xf9, 0x7c, 0xfc, 0x9d, 0xef, 0x3b, 0x3e, 0x39, 0x50, 0x0b,
	0xbb, 0x61, 0x27, 0x8c, 0x98, 0x60, 0xa8, 0x14, 0x8e, 0xec, 0x7f, 0x27, 0x8c, 0x4d, 0x9e, 0xe8,
	0x89, 0x44, 0x46, 0xd3, 0xef, 0x27, 0xf4, 0x39, 0x14, 0xbf, 0x93, 0x04, 0x7c, 0x0f, 0xeb, 0x0f,
	0x34, 0xe2, 0x3e, 0x0b, 0x6e, 0x28, 0xe7, 0xee, 0x84, 0x22, 0x0b, 0xd6, 0x14, 0x62, 0x19, 0x6d,
	0xe3, 0xb0, 0x41, 0x74, 0x88, 0xd6, 0xa1, 0x34, 0xe8, 0x59, 0xa5, 0xb6, 0x71, 0x58, 0x23, 0xa5,
	0x41, 0x2f, 0xce, 0x3c, 0x1f, 0x8f, 0x23, 0xca, 0xb9, 0xb5, 0x22, 0x41, 0x1d, 0xe2, 0x26, 0x34,
	0x1e, 0x68, 0xe4, 0x7a, 0x3f, 0x15, 0x29, 0x3e, 0x00, 0xd3, 0xf1, 0x83, 0x89, 0xae, 0xb1, 0x05,
	0xab, 0xb7, 0x2c, 0xf0, 0xa8, 0xac, 0x50, 0x26, 0x49, 0x20, 0x93, 0xd8, 0xb2, 0xa4, 0x23, 0x68,
	0x10, 0xfa, 0x83, 0x7a, 0x22, 0xa7, 0x57, 0x7d, 0xca, 0xc4, 0x1a, 0xd1, 0x21, 0xbe, 0x83, 0x66,
	0x9f, 0x8a, 0x8b, 0x27, 0x96, 0xea, 0x40, 0x18, 0xea, 0xd7, 0xcc, 0x73, 0x05, 0x8b, 0xae, 0xdc,
	0x47, 0xca, 0x2d, 0xa3, 0xbd, 0x72, 0x58, 0x27, 0x33, 0x18, 0xb2, 0xa1, 0x7a, 0xe5, 0xf2, 0xc7,
	0xa1, 0x60, 0xa1, 0x34, 0x5b, 0x27, 0x69, 0x8c, 0x31, 0xd4, 0x67, 0xf8, 0x10, 0x94, 0xe3, 0x33,
	0x59, 0xb9, 0x4e, 0xe4, 0x37, 0xbe, 0x06, 0x6b, 0x48, 0x83, 0x71, 0xcf, 0x8f, 0x32, 0x95, 0x84,
	0xfe, 0x9a, 0x52, 0x2e, 0xd0, 0x36, 0x54, 0x1c, 0x4a, 0xa3, 0x41, 0x4f, 0x69, 0x55, 0x51, 0xde,
	0x44, 0x52, 0x32, 0x35, 0x71, 0x0e, 0x7b, 0xc3, 0xe9, 0x88, 0x7b, 0x91, 0x3f, 0xa2, 0x0b, 0x29,
	0xdb, 0x60, 0x2a, 0xe4, 0xd6, 0x7d, 0xd6, 0x3d, 0xc8, 0x43, 0xf8, 0x06, 0xfe, 0x99, 0xb9, 0xa9,
	0xf8, 0x42, 0x91, 0x3d, 0x6a, 0xd2, 0xe2, 0xf8, 0x51, 0x5f, 0xd0, 0x95, 0x16, 0xd1, 0xfd, 0x77,
	0xed, 0x73, 0x41, 0x83, 0xcf, 0x2c, 0x9a, 0xe1, 0xe5, 0x84, 0xf2, 0x90, 0x05, 0x9c, 0x16, 0xda,
	0x44, 0x50, 0xee, 0xb9, 0xc2, 0x55, 0x1e, 0xe5, 0x37, 0x3e, 0x86, 0x56, 0x5e, 0x90, 0xb6, 0xb5,
	0x05, 0xab, 0xf7, 0x2c, 0xf4, 0x3d, 0xc5, 0x90, 0x04, 0x78, 0x1f, 0xea, 0xaf, 0xa9, 0xc7, 0x1f,
	0xa1, 0xa9, 0xc4, 0x9c, 0x07, 0x63, 0x79, 0x25, 0xad, 0x69, 0x64, 0x35, 0x33, 0xf2, 0x52, 0x9e,
	0xbc, 0x0d, 0xe5, 0x58, 0x67, 0x7e, 0xae, 0x8d, 0xd9, 0xb9, 0xee, 0xc2, 0x46, 0x9f, 0x8a, 0x38,
	0x29, 0xf3, 0xba, 0x0f, 0xab, 0x12, 0x90, 0xb3, 0x64, 0x76, 0xab, 0x9d, 0x70, 0xd4, 0x89, 0x01,
	0x92, 0xc0, 0x78, 0x2f, 0x7d, 0xda, 0x45, 0x52, 0xf0, 0x1b, 0x75, 0x7d, 0x29, 0x4f, 0x03, 0x4c,
	0xa7, 0xeb, 0x0c, 0xa9, 0x10, 0x7e, 0x30, 0xe1, 0xf8, 0x14, 0x36, 0x2e, 0x59, 0x10, 0x50, 0x2f,
	0xee, 0xc3, 0x50, 0xb8, 0x62, 0xca, 0xd1, 0x2e, 0xd4, 0x14, 0x46, 0xc7, 0xb2, 0x48, 0x95, 0x64,
	0x00, 0x3e, 0x86, 0xa6, 0x0a, 0x52, 0xed, 0x16, 0xac, 0x0d, 0xa7, 0x9e, 0xa7, 0x9d, 0x56, 0x89,
	0x0e, 0xbb, 0x7f, 0x2a, 0x50, 0x71, 0xba, 0x0e, 0x71, 0x2e, 0xd1, 0x25, 0xb4, 0xfa, 0x54, 0xcc,
	0x15, 0xdb, 0xee, 0x24, 0x7b, 0xa5, 0xa3, 0xf7, 0x4a, 0xe7, 0x53, 0xbc, 0x57, 0xec, 0xad, 0x58,
	0xf8, 0x5c, 0xf6, 0x19, 0x54, 0x75, 0xe7, 0x5e, 0xbf, 0x39, 0xd7, 0xdf, 0xf7, 0x50, 0x4b, 0x7f,
	0x00, 0xb4, 0x13, 0xa7, 0x2c, 0x18, 0x17, 0x7b, 0xe3, 0xe5, 0x01, 0x7a, 0x07, 0x9b, 0xe9, 0x98,
	0xea, 0x01, 0x45, 0x73, 0x69, 0xb6, 0x19, 0x23, 0xea, 0xfc, 0xd4, 0x40, 0x1f, 0xc0, 0xfc, 0x12,
	0xf0, 0xb4, 0xde, 0x7c, 0x7e, 0x81, 0x78, 0x74, 0x04, 0x6b, 0xca, 0x34, 0xaa, 0xe9, 0xa7, 0xe3,
	0x76, 0x2b, 0xd7, 0x8c, 0x9c, 0x23, 0xb3, 0x4f, 0x85, 0x7e, 0xc9, 0xc2, 0x76, 0x34, 0x25, 0x4d,
	0xf6, 0xe4, 0xe8, 0x0c, 0x6a, 0x17, 0x11, 0x73, 0xc7, 0x9e, 0xcb, 0x05, 0x6a, 0xe5, 0x74, 0xeb,
	0x59, 0x2f, 0x14, 0x37, 0x80, 0xcd, 0xb9, 0x95, 0x84, 0x76, 0xa5, 0xb7, 0x82, 0x4d, 0x55, 0x48,
	0xf5, 0x15, 0xb6, 0x17, 0xef, 0x23, 0xf4, 0x7f, 0xae, 0x57, 0x8b, 0x77, 0x95, 0xbd, 0x17, 0xa7,
	0x14, 0xef, 0xa2, 0x3b, 0xb0, 0x72, 0xcd, 0x9f, 0x65, 0x7f, 0xfd, 0x6a, 0xa1, 0xdc, 0x6f, 0xb0,
	0x53, 0xb0, 0xac, 0x96, 0x31, 0x1e, 0xc4, 0xc7, 0x4b, 0x16, 0xdd, 0xa9, 0x31, 0xaa, 0xc8, 0x82,
	0x6f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xef, 0x81, 0x5e, 0xd5, 0x75, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PRPCClient is the client API for P2PRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PRPCClient interface {
	GetConnectionStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConnectionStatus, error)
	GetPeers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPeersResponse, error)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error)
	ListenForMessages(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (P2PRPC_ListenForMessagesClient, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*empty.Empty, error)
	Connect(ctx context.Context, in *Peers, opts ...grpc.CallOption) (*ConnectResponse, error)
	GetSettings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*P2PSettings, error)
	Broadcast(ctx context.Context, in *MessageAndTopic, opts ...grpc.CallOption) (*empty.Empty, error)
	SendDirectMessage(ctx context.Context, in *SendDirectMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubscribeDirectMessage(ctx context.Context, in *SubscribeDirectMessageRequest, opts ...grpc.CallOption) (*DirectMessageSubscription, error)
	UnsubscribeDirectMessage(ctx context.Context, in *DirectMessageSubscription, opts ...grpc.CallOption) (*empty.Empty, error)
	ListenForDirectMessages(ctx context.Context, in *DirectMessageSubscription, opts ...grpc.CallOption) (P2PRPC_ListenForDirectMessagesClient, error)
}

type p2PRPCClient struct {
	cc *grpc.ClientConn
}

func NewP2PRPCClient(cc *grpc.ClientConn) P2PRPCClient {
	return &p2PRPCClient{cc}
}

func (c *p2PRPCClient) GetConnectionStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConnectionStatus, error) {
	out := new(ConnectionStatus)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/GetConnectionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) GetPeers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	out := new(GetPeersResponse)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/GetPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) ListenForMessages(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (P2PRPC_ListenForMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PRPC_serviceDesc.Streams[0], "/pb.P2PRPC/ListenForMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PRPCListenForMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2PRPC_ListenForMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type p2PRPCListenForMessagesClient struct {
	grpc.ClientStream
}

func (x *p2PRPCListenForMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PRPCClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) Connect(ctx context.Context, in *Peers, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) GetSettings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*P2PSettings, error) {
	out := new(P2PSettings)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) Broadcast(ctx context.Context, in *MessageAndTopic, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) SendDirectMessage(ctx context.Context, in *SendDirectMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/SendDirectMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) SubscribeDirectMessage(ctx context.Context, in *SubscribeDirectMessageRequest, opts ...grpc.CallOption) (*DirectMessageSubscription, error) {
	out := new(DirectMessageSubscription)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/SubscribeDirectMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) UnsubscribeDirectMessage(ctx context.Context, in *DirectMessageSubscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PRPC/UnsubscribeDirectMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PRPCClient) ListenForDirectMessages(ctx context.Context, in *DirectMessageSubscription, opts ...grpc.CallOption) (P2PRPC_ListenForDirectMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PRPC_serviceDesc.Streams[1], "/pb.P2PRPC/ListenForDirectMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PRPCListenForDirectMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2PRPC_ListenForDirectMessagesClient interface {
	Recv() (*ListenForDirectMessagesResponse, error)
	grpc.ClientStream
}

type p2PRPCListenForDirectMessagesClient struct {
	grpc.ClientStream
}

func (x *p2PRPCListenForDirectMessagesClient) Recv() (*ListenForDirectMessagesResponse, error) {
	m := new(ListenForDirectMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PRPCServer is the server API for P2PRPC service.
type P2PRPCServer interface {
	GetConnectionStatus(context.Context, *empty.Empty) (*ConnectionStatus, error)
	GetPeers(context.Context, *empty.Empty) (*GetPeersResponse, error)
	Subscribe(context.Context, *SubscriptionRequest) (*Subscription, error)
	ListenForMessages(*Subscription, P2PRPC_ListenForMessagesServer) error
	Unsubscribe(context.Context, *Subscription) (*empty.Empty, error)
	Connect(context.Context, *Peers) (*ConnectResponse, error)
	GetSettings(context.Context, *empty.Empty) (*P2PSettings, error)
	Broadcast(context.Context, *MessageAndTopic) (*empty.Empty, error)
	SendDirectMessage(context.Context, *SendDirectMessageRequest) (*empty.Empty, error)
	SubscribeDirectMessage(context.Context, *SubscribeDirectMessageRequest) (*DirectMessageSubscription, error)
	UnsubscribeDirectMessage(context.Context, *DirectMessageSubscription) (*empty.Empty, error)
	ListenForDirectMessages(*DirectMessageSubscription, P2PRPC_ListenForDirectMessagesServer) error
}

func RegisterP2PRPCServer(s *grpc.Server, srv P2PRPCServer) {
	s.RegisterService(&_P2PRPC_serviceDesc, srv)
}

func _P2PRPC_GetConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).GetConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/GetConnectionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).GetConnectionStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).GetPeers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).Subscribe(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_ListenForMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PRPCServer).ListenForMessages(m, &p2PRPCListenForMessagesServer{stream})
}

type P2PRPC_ListenForMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type p2PRPCListenForMessagesServer struct {
	grpc.ServerStream
}

func (x *p2PRPCListenForMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _P2PRPC_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).Connect(ctx, req.(*Peers))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).GetSettings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAndTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).Broadcast(ctx, req.(*MessageAndTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_SendDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).SendDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/SendDirectMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).SendDirectMessage(ctx, req.(*SendDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_SubscribeDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).SubscribeDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/SubscribeDirectMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).SubscribeDirectMessage(ctx, req.(*SubscribeDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_UnsubscribeDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectMessageSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PRPCServer).UnsubscribeDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PRPC/UnsubscribeDirectMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PRPCServer).UnsubscribeDirectMessage(ctx, req.(*DirectMessageSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PRPC_ListenForDirectMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DirectMessageSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PRPCServer).ListenForDirectMessages(m, &p2PRPCListenForDirectMessagesServer{stream})
}

type P2PRPC_ListenForDirectMessagesServer interface {
	Send(*ListenForDirectMessagesResponse) error
	grpc.ServerStream
}

type p2PRPCListenForDirectMessagesServer struct {
	grpc.ServerStream
}

func (x *p2PRPCListenForDirectMessagesServer) Send(m *ListenForDirectMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _P2PRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.P2PRPC",
	HandlerType: (*P2PRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectionStatus",
			Handler:    _P2PRPC_GetConnectionStatus_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _P2PRPC_GetPeers_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _P2PRPC_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _P2PRPC_Unsubscribe_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _P2PRPC_Connect_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _P2PRPC_GetSettings_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _P2PRPC_Broadcast_Handler,
		},
		{
			MethodName: "SendDirectMessage",
			Handler:    _P2PRPC_SendDirectMessage_Handler,
		},
		{
			MethodName: "SubscribeDirectMessage",
			Handler:    _P2PRPC_SubscribeDirectMessage_Handler,
		},
		{
			MethodName: "UnsubscribeDirectMessage",
			Handler:    _P2PRPC_UnsubscribeDirectMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForMessages",
			Handler:       _P2PRPC_ListenForMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenForDirectMessages",
			Handler:       _P2PRPC_ListenForDirectMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "p2p.proto",
}
